{"version":3,"file":"market.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/market-contract/internal.ts","../src/market-contract/sale.ts","../src/market-contract/sale_views.ts","../src/market-contract/nft_callbacks.ts","../src/market-contract/index.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","import { assert, near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, DELIMETER } from \".\";\nimport { Sale } from \"./sale\";\n\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\n//used to make sure the user attached exactly 1 yoctoNEAR\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\n//internal method for removing a sale from the market. This returns the previously removed sale object\nexport function internallyRemoveSale(contract: Contract, nftContractId: string, tokenId: string): Sale {\n    //get the unique sale ID (contract + DELIMITER + token ID)\n    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;\n    //get the sale object by removing the unique sale ID. If there was no sale, panic\n    let sale = contract.sales.remove(contractAndTokenId) as Sale;\n    if (sale == null) {\n        near.panic(\"no sale\");\n    }\n    \n    //get the set of sales for the sale's owner. If there's no sale, panic. \n    let byOwnerId = restoreOwners(contract.byOwnerId.get(sale.owner_id));\n    if (byOwnerId == null) {\n        near.panic(\"no sales by owner\");\n    }\n    //remove the unique sale ID from the set of sales\n    byOwnerId.remove(contractAndTokenId);\n\n    //if the set of sales is now empty after removing the unique sale ID, we simply remove that owner from the map\n    if (byOwnerId.isEmpty()) {\n        contract.byOwnerId.remove(sale.owner_id);\n    //if the set of sales is not empty after removing, we insert the set back into the map for the owner\n    } else {\n        contract.byOwnerId.set(sale.owner_id, byOwnerId);\n    }\n\n    //get the set of token IDs for sale for the nft contract ID. If there's no sale, panic. \n    let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));\n    if (byNftContractId == null) {\n        near.panic(\"no sales by nft contract\");\n    }\n    \n    //remove the token ID from the set \n    byNftContractId.remove(tokenId);\n    //if the set is now empty after removing the token ID, we remove that nft contract ID from the map\n    if (byNftContractId.isEmpty()) {\n        contract.byNftContractId.remove(nftContractId);\n    //if the set is not empty after removing, we insert the set back into the map for the nft contract ID\n    } else {\n        contract.byNftContractId.set(nftContractId, byNftContractId);\n    }\n\n    //return the sale object\n    return sale;\n}\n\n","import { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, DELIMETER } from \".\";\nimport { assertOneYocto, internallyRemoveSale } from \"./internal\";\n\n//GAS constants to attach to calls\nconst GAS_FOR_ROYALTIES = 115_000_000_000_000;\nconst GAS_FOR_NFT_TRANSFER = 15_000_000_000_000;\n\n//struct that holds important information about each sale on the market\nexport class Sale {\n    //owner of the sale\n    owner_id: string;\n    //market contract's approval ID to transfer the token on behalf of the owner\n    approval_id: number;\n    //nft contract where the token was minted\n    nft_contract_id: string;\n    //actual token ID for sale\n    token_id: String;\n    //sale price in yoctoNEAR that the token is listed for\n    sale_conditions: string;\n    \n    constructor(\n        {\n            ownerId,\n            approvalId,\n            nftContractId,\n            tokenId,\n            saleConditions,\n        }:{ \n            ownerId: string,\n            approvalId: number,\n            nftContractId: string,\n            tokenId: String,\n            saleConditions: string,\n        }) {\n        this.owner_id = ownerId;\n        this.approval_id = approvalId;\n        this.nft_contract_id = nftContractId;\n        this.token_id = tokenId;\n        this.sale_conditions = saleConditions;\n    }\n}\n\n//removes a sale from the market. \nexport function internalRemoveSale({\n    contract,\n    nftContractId,\n    tokenId\n}:{ \n    contract: Contract, \n    nftContractId: string, \n    tokenId: string \n}) {\n    //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)\n    assertOneYocto();\n    \n    //get the sale object as the return value from removing the sale internally\n    let sale = internallyRemoveSale(contract, nftContractId, tokenId);\n\n    //get the predecessor of the call and make sure they're the owner of the sale\n    let ownerId = near.predecessorAccountId();\n\n    //assert that the owner of the sale is the same as the caller of the function\n    assert(ownerId == sale.owner_id, \"only the owner of the sale can remove it\");\n}\n\n//updates the price for a sale on the market\nexport function internalUpdatePrice({\n    contract,\n    nftContractId,\n    tokenId,\n    price\n}:{ \n    contract: Contract, \n    nftContractId: string, \n    tokenId: string, \n    price: string \n}) {\n    //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)\n    assertOneYocto();\n\n    //create the unique sale ID from the nft contract and token\n    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;\n\n    //get the sale object from the unique sale ID. If there is no token, panic. \n    let sale = contract.sales.get(contractAndTokenId) as Sale;\n    if (sale == null) {\n        near.panic(\"no sale\");\n    }\n\n    assert(near.predecessorAccountId() == sale.owner_id, \"only the owner of the sale can update it\");\n    //set the sale conditions equal to the passed in price\n    sale.sale_conditions = price; \n    //insert the sale back into the map for the unique sale ID\n    contract.sales.set(contractAndTokenId, sale);\n}\n\n//place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price\nexport function internalOffer({\n    contract,\n    nftContractId,\n    tokenId\n}:{\n    contract: Contract, \n    nftContractId: string, \n    tokenId: string\n}) {\n    //get the attached deposit and make sure it's greater than 0\n    let deposit = near.attachedDeposit().valueOf();\n    assert(deposit > 0, \"deposit must be greater than 0\");\n \n    //get the unique sale ID (contract + DELIMITER + token ID)\n    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;\n    //get the sale object from the unique sale ID. If the sale doesn't exist, panic.\n    let sale = contract.sales.get(contractAndTokenId) as Sale;\n    if (sale == null) {\n        near.panic(\"no sale\");\n    }\n\n    //get the buyer ID which is the person who called the function and make sure they're not the owner of the sale\n    let buyerId = near.predecessorAccountId();\n    assert(buyerId != sale.owner_id, \"you can't offer on your own sale\");\n\n    //get the u128 price of the token (dot 0 converts from U128 to u128)\n    let price = BigInt(sale.sale_conditions);\n    //make sure the deposit is greater than the price\n    assert(deposit >= price, \"deposit must be greater than or equal to price\");\n    \n    //process the purchase (which will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties) \n    processPurchase({contract, nftContractId, tokenId, price: deposit.toString(), buyerId});\n}\n\n//private function used when a sale is purchased. \n//this will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties\nexport function processPurchase({\n    contract,\n    nftContractId,\n    tokenId,\n    price,\n    buyerId\n}:{\n    contract: Contract, \n    nftContractId: string, \n    tokenId: string, \n    price: string, \n    buyerId: string\n}) {\n    //get the sale object by removing the sale\n    let sale = internallyRemoveSale(contract, nftContractId, tokenId);\n\n    //initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return\n    //a payout object used for the market to distribute funds to the appropriate accounts.\n    const promise = near.promiseBatchCreate(nftContractId);\n    near.promiseBatchActionFunctionCall(\n        promise, \n        \"nft_transfer_payout\", \n        bytes(JSON.stringify({ \n                receiver_id: buyerId, //purchaser (person to transfer the NFT to)\n                token_id: tokenId, //token ID to transfer\n                approval_id: sale.approval_id, //market contract's approval ID in order to transfer the token on behalf of the owner\n                memo: \"payout from market\", //memo (to include some context)\n                /*\n                    the price that the token was purchased for. This will be used in conjunction with the royalty percentages\n                    for the token in order to determine how much money should go to which account. \n                */\n                balance: price, \n                max_len_payout : 10 //the maximum amount of accounts the market can payout at once (this is limited by GAS)\n        })), \n        1, // 1 yoctoNEAR\n        GAS_FOR_NFT_TRANSFER\n    );\n\n    //after the transfer payout has been initiated, we resolve the promise by calling our own resolve_purchase function. \n    //resolve purchase will take the payout object returned from the nft_transfer_payout and actually pay the accounts\n    near.promiseThen(\n        promise, \n        near.currentAccountId(), \n        \"resolve_purchase\", \n        bytes(JSON.stringify({\n            buyer_id: buyerId, //the buyer and price are passed in incase something goes wrong and we need to refund the buyer\n            price: price\n        })), \n        0, // no deposit \n        GAS_FOR_ROYALTIES\n    );\n    return near.promiseReturn(promise);\n}\n\n/*\n    private method used to resolve the promise when calling nft_transfer_payout. This will take the payout object and \n    check to see if it's authentic and there's no problems. If everything is fine, it will pay the accounts. If there's a problem,\n    it will refund the buyer for the price. \n*/\nexport function internalResolvePurchase({\n    buyerId,\n    price\n}:{\n    buyerId: string, \n    price: string\n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n\n    // checking for payout information returned from the nft_transfer_payout method\n    let result = near.promiseResult(0);\n    let payout = null;\n    if (typeof result === 'string') {\n        //if we set the payout_option to None, that means something went wrong and we should refund the buyer\n        \n        try {\n            let payoutOption = JSON.parse(result);\n            if (Object.keys(payoutOption.payout).length > 10 || Object.keys(payoutOption.payout).length < 1) {\n                //we'll check if length of the payout object is > 10 or it's empty. In either case, we return None\n                throw \"Cannot have more than 10 royalties\";\n            //if the payout object is the correct length, we move forward\n            } else {\n                //we'll keep track of how much the nft contract wants us to payout. Starting at the full price payed by the buyer\n                let remainder = BigInt(price);\n                //loop through the payout and subtract the values from the remainder. \n                Object.entries(payoutOption.payout).forEach(([key, value], index) => {\n                    remainder = remainder - BigInt(value as string);\n                });\n\n                //Check to see if the NFT contract sent back a faulty payout that requires us to pay more or too little. \n                //The remainder will be 0 if the payout summed to the total price. The remainder will be 1 if the royalties\n                //we something like 3333 + 3333 + 3333.\n                if (remainder == BigInt(0) || remainder == BigInt(1)) {\n                    //set the payout because nothing went wrong\n                    payout = payoutOption.payout;\n                } else {\n                    //if the remainder was anything but 1 or 0, we return None\n                    throw \"Payout is not correct\";\n                }\n            }\n        } catch (e) {\n            near.log(`error parsing payout object ${result}`);\n            payout = null;\n        }\n    }\n    \n    //if the payout was null, we refund the buyer for the price they payed and return\n    if (payout == null) {\n        const promise = near.promiseBatchCreate(buyerId);\n        near.promiseBatchActionTransfer(promise, BigInt(price))\n        return price;\n    } \n    // NEAR payouts\n    for (let [key, value] of Object.entries(payout)) {\n        const promise = near.promiseBatchCreate(key);\n        near.promiseBatchActionTransfer(promise, BigInt(value as string))\n    }\n\n    //return the price payout out\n    return price;\n}","import { Contract } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { Sale } from \"./sale\";\n    \n//returns the number of sales the marketplace has up (as a string)\nexport function internalSupplySales({\n    contract\n}:{\n    contract: Contract\n}): string {\n    //returns the sales object length wrapped as a string\n    return contract.sales.len().toString();\n}\n\n//returns the number of sales for a given account (result is a string)\nexport function internalSupplyByOwnerId({\n    contract,\n    accountId\n}:{ \n    contract: Contract, \n    accountId: string\n}): string {\n    //get the set of sales for the given owner Id\n    let byOwnerId = restoreOwners(contract.byOwnerId.get(accountId));\n    //if there as some set, we return the length but if there wasn't a set, we return 0\n    if (byOwnerId == null) {\n        return \"0\"\n    }\n\n    return byOwnerId.len().toString();\n}\n\n//returns paginated sale objects for a given account. (result is a vector of sales)\nexport function internalSalesByOwnerId({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): Sale[] {\n    //get the set of token IDs for sale for the given account ID\n    let tokenSet = restoreOwners(contract.byOwnerId.get(accountId));\n\n    //if there was no set, we return an empty array\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let sales: Sale[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let sale = contract.sales.get(keys[i]) as Sale; \n        if (sale != null) {\n            sales.push(sale);\n        }\n    }\n    return sales;\n}\n\n//get the number of sales for an nft contract. (returns a string)\nexport function internalSupplyByNftContractId({\n    contract,\n    nftContractId\n}:{ \n    contract: Contract, \n    nftContractId: string\n}): string {\n    //get the set of tokens for associated with the given nft contract\n    let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));\n    //if there as some set, we return the length but if there wasn't a set, we return 0\n    if (byNftContractId == null) {\n        return \"0\"\n    }\n\n    return byNftContractId.len().toString();\n}\n\n//returns paginated sale objects associated with a given nft contract. (result is a vector of sales)\nexport function internalSalesByNftContractId({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{    \n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): Sale[] {\n    //get the set of token IDs for sale for the given contract ID\n    let tokenSet = restoreOwners(contract.byNftContractId.get(accountId));\n\n    //if there was no set, we return an empty array\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    //take the first \"limit\" elements in the array. If we didn't specify a limit, use 50\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let sales: Sale[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let sale = contract.sales.get(keys[i]) as Sale; \n        if (sale != null) {\n            sales.push(sale);\n        }\n    }\n    return sales;\n}\n\n//get a sale information for a given unique sale ID (contract + DELIMITER + token ID)\nexport function internalGetSale({\n    contract,\n    nftContractToken,\n}:{\n    contract: Contract, \n    nftContractToken: string\n}): Sale {\n    //try and get the sale object for the given unique sale ID. Will return an option since\n    //we're not guaranteed that the unique sale ID passed in will be valid.n);\n    return contract.sales.get(nftContractToken) as Sale;\n}\n\n\n\n","import { assert, near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, DELIMETER } from \".\";\nimport { Sale } from \"./sale\";\nimport { internalSupplyByOwnerId } from \"./sale_views\";\n\n/// where we add the sale because we know nft owner can only call nft_approve\nexport function internalNftOnApprove({\n    contract,\n    tokenId,\n    ownerId,\n    approvalId,\n    msg\n}:{ \n    contract: Contract, \n    tokenId: string, \n    ownerId: string, \n    approvalId: number, \n    msg: string \n}) {\n    // get the contract ID which is the predecessor\n    let contractId = near.predecessorAccountId();\n    //get the signer which is the person who initiated the transaction\n    let signerId = near.signerAccountId();\n    \n    //make sure that the signer isn't the predecessor. This is so that we're sure\n    //this was called via a cross-contract call\n    assert(signerId != contractId, \"this function can only be called via a cross-contract call\");\n    //make sure the owner ID is the signer. \n    assert(ownerId == signerId, \"only the owner of the token can approve it\");\n    \n    //we need to enforce that the user has enough storage for 1 EXTRA sale.  \n    let storageAmount = contract.storage_minimum_balance();\n    //get the total storage paid by the owner\n    let ownerPaidStorage = contract.storageDeposits.get(signerId) || BigInt(0);\n    //get the storage required which is simply the storage for the number of sales they have + 1 \n    let signerStorageRequired = (BigInt(internalSupplyByOwnerId({contract, accountId: signerId})) + BigInt(1)) * BigInt(storageAmount); \n    \n    //make sure that the total paid is >= the required storage\n    assert(ownerPaidStorage >= signerStorageRequired, \"the owner does not have enough storage to approve this token\");\n    \n    //if all these checks pass we can create the sale conditions object.\n    let saleConditions = JSON.parse(msg);\n    if (!saleConditions.hasOwnProperty('sale_conditions') || Object.keys(saleConditions).length != 1) {\n        near.panic(\"invalid sale conditions\");\n    }\n    //create the unique sale ID which is the contract + DELIMITER + token ID\n    let contractAndTokenId = `${contractId}${DELIMETER}${tokenId}`;\n    \n    //insert the key value pair into the sales map. Key is the unique ID. value is the sale object\n    contract.sales.set(contractAndTokenId, new Sale({\n        ownerId: ownerId, //owner of the sale / token\n        approvalId: approvalId, //approval ID for that token that was given to the market\n        nftContractId: contractId, //NFT contract the token was minted on\n        tokenId: tokenId, //the actual token ID\n        saleConditions: saleConditions.sale_conditions //the sale conditions \n    }));\n\n    //Extra functionality that populates collections necessary for the view calls \n    //get the sales by owner ID for the given owner. If there are none, we create a new empty set\n    let byOwnerId = contract.byOwnerId.get(ownerId) as UnorderedSet || new UnorderedSet(ownerId);\n    //insert the unique sale ID into the set\n    byOwnerId.set(contractAndTokenId);\n    //insert that set back into the collection for the owner\n    contract.byOwnerId.set(ownerId, byOwnerId);\n    \n    //get the token IDs for the given nft contract ID. If there are none, we create a new empty set\n    let byNftContractId = contract.byNftContractId.get(contractId) as UnorderedSet || new UnorderedSet(contractId);\n    //insert the token ID into the set\n    byNftContractId.set(tokenId);\n    //insert the set back into the collection for the given nft contract ID\n    contract.byNftContractId.set(contractId, byNftContractId);\n\n}","import { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet, assert } from 'near-sdk-js'\nimport { assertOneYocto, restoreOwners } from './internal';\nimport { internalNftOnApprove } from './nft_callbacks';\nimport { internalOffer, internalRemoveSale, internalResolvePurchase, internalUpdatePrice, Sale } from './sale';\nimport { internalGetSale, internalSalesByNftContractId, internalSalesByOwnerId, internalSupplyByNftContractId, internalSupplyByOwnerId, internalSupplySales } from './sale_views';\n\n/// This spec can be treated like a version of the standard.\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\n/// This is the name of the NFT standard we're using\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n//the minimum storage to have a sale on the contract.\nexport const STORAGE_PER_SALE: bigint = BigInt(1000) * near.storageByteCost().valueOf();\n\n//every sale will have a unique ID which is `CONTRACT + DELIMITER + TOKEN_ID`\nexport const DELIMETER = \".\";\n\n@NearBindgen\nexport class Contract extends NearContract {\n    //keep track of the owner of the contract\n    ownerId: string;\n    \n    /*\n        to keep track of the sales, we map the ContractAndTokenId to a Sale. \n        the ContractAndTokenId is the unique identifier for every sale. It is made\n        up of the `contract ID + DELIMITER + token ID`\n    */\n    sales: UnorderedMap;\n    \n    //keep track of all the Sale IDs for every account ID\n    byOwnerId: LookupMap;\n\n    //keep track of all the token IDs for sale for a given contract\n    byNftContractId: LookupMap;\n\n    //keep track of the storage that accounts have payed\n    storageDeposits: LookupMap;\n\n    /*\n        initialization function (can only be called once).\n        this initializes the contract with metadata that was passed in and\n        the owner_id. \n    */\n    constructor({ owner_id }: { owner_id: string }) {\n        super()\n        this.ownerId = owner_id;\n        this.sales = new UnorderedMap(\"sales\");\n        this.byOwnerId = new LookupMap(\"byOwnerId\");\n        this.byNftContractId = new LookupMap(\"byNftContractId\");\n        this.storageDeposits = new LookupMap(\"storageDeposits\");\n    }\n\n    default() {\n        return new Contract({owner_id: ''})\n    }\n\n    /*\n        STORAGE\n    */\n    @call\n    //Allows users to deposit storage. This is to cover the cost of storing sale objects on the contract\n    //Optional account ID is to users can pay for storage for other people.\n    storage_deposit({ account_id }: { account_id?: string }) {\n        //get the account ID to pay for storage for\n        let storageAccountId = account_id || near.predecessorAccountId();\n\n        //get the deposit value which is how much the user wants to add to their storage\n        let deposit = near.attachedDeposit().valueOf();\n\n        //make sure the deposit is greater than or equal to the minimum storage for a sale\n        assert(deposit >= STORAGE_PER_SALE, `Requires minimum deposit of ${STORAGE_PER_SALE}`);\n\n        //get the balance of the account (if the account isn't in the map we default to a balance of 0)\n        let balance: string = this.storageDeposits.get(storageAccountId) as string || \"0\";\n        //add the deposit to their balance\n        let newBalance = BigInt(balance) + deposit;\n        //insert the balance back into the map for that account ID\n        this.storageDeposits.set(storageAccountId, newBalance.toString());\n    }\n\n    @call\n    //Allows users to withdraw any excess storage that they're not using. Say Bob pays 0.01N for 1 sale\n    //Alice then buys Bob's token. This means bob has paid 0.01N for a sale that's no longer on the marketplace\n    //Bob could then withdraw this 0.01N back into his account. \n    storage_withdraw() {\n        //make sure the user attaches exactly 1 yoctoNEAR for security purposes.\n        //this will redirect them to the NEAR wallet (or requires a full access key). \n        assertOneYocto();\n\n        //the account to withdraw storage to is always the function caller\n        let ownerId = near.predecessorAccountId();\n        //get the amount that the user has by removing them from the map. If they're not in the map, default to 0\n        let amount: string = this.storageDeposits.remove(ownerId) as string || \"0\";\n        \n        //how many sales is that user taking up currently. This returns a set\n        let sales = restoreOwners(this.byOwnerId.get(ownerId));\n        //get the length of that set. \n        let len = 0;\n        if (sales != null) {\n            len = sales.len();\n        }   \n        \n        //how much NEAR is being used up for all the current sales on the account \n        let diff = BigInt(len) * STORAGE_PER_SALE;\n        //the excess to withdraw is the total storage paid - storage being used up.\n        let amountLeft = BigInt(amount) - diff;\n\n        //if that excess to withdraw is > 0, we transfer the amount to the user.\n        if (amountLeft > 0) {\n            const promise = near.promiseBatchCreate(ownerId);\n            near.promiseBatchActionTransfer(promise, amountLeft)\n        }\n\n        //we need to add back the storage being used up into the map if it's greater than 0.\n        //this is so that if the user had 500 sales on the market, we insert that value here so\n        //if those sales get taken down, the user can then go and withdraw 500 sales worth of storage.\n        if (diff > 0) {\n            this.storageDeposits.set(ownerId, diff.toString());\n        }\n    }\n\n    @view\n    //return the minimum storage for 1 sale\n    storage_minimum_balance(): string {\n        return STORAGE_PER_SALE.toString()\n    }\n\n    @view\n    //return how much storage an account has paid for\n    storage_balance_of({ account_id }: { account_id: string}): string {\n        return this.storageDeposits.get(account_id) as string || \"0\";\n    }\n\n    /*\n        SALES\n    */\n    @call\n    //removes a sale from the market. \n    remove_sale({nft_contract_id, token_id}:{nft_contract_id: string, token_id: string}) {\n        return internalRemoveSale({contract: this, nftContractId: nft_contract_id, tokenId: token_id});\n    }\n\n    @call\n    //updates the price for a sale on the market\n    update_price({nft_contract_id, token_id, price}:{nft_contract_id: string, token_id: string, price: string}) {\n        return internalUpdatePrice({contract: this, nftContractId: nft_contract_id, tokenId: token_id, price: price});\n    }\n\n    @call\n    //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price\n    offer({nft_contract_id, token_id}:{nft_contract_id: string, token_id: string}) {\n        return internalOffer({contract: this, nftContractId: nft_contract_id, tokenId: token_id});\n    }\n\n    @call\n    //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price\n    resolve_purchase({buyer_id, price}:{buyer_id: string, price: string}) {\n        return internalResolvePurchase({buyerId: buyer_id, price: price});\n    }\n\n    /*\n        SALE VIEWS\n    */\n    @view\n    //returns the number of sales the marketplace has up (as a string)\n    get_supply_sales(): string {\n        return internalSupplySales({contract: this});\n    }\n\n    @view\n    //returns the number of sales for a given account (result is a string)\n    get_supply_by_owner_id({account_id}:{account_id: string}): string {\n        return internalSupplyByOwnerId({contract: this, accountId: account_id});\n    }\n\n    @view\n    //returns paginated sale objects for a given account. (result is a vector of sales)\n    get_sales_by_owner_id({account_id, from_index, limit}:{account_id: string, from_index?: string, limit?: number}): Sale[] {\n        return internalSalesByOwnerId({contract: this, accountId: account_id, fromIndex: from_index, limit: limit});\n    }\n\n    @view\n    //returns paginated sale objects for a given account. (result is a vector of sales)\n    get_supply_by_nft_contract_id({nft_contract_id}:{nft_contract_id: string}): string {\n        return internalSupplyByNftContractId({contract: this, nftContractId: nft_contract_id});        \n    }\n\n    @view\n    //returns paginated sale objects associated with a given nft contract. (result is a vector of sales)\n    get_sales_by_nft_contract_id({nft_contract_id, from_index, limit}:{nft_contract_id: string, from_index?: string, limit?: number}): Sale[] {\n        return internalSalesByNftContractId({contract: this, accountId: nft_contract_id, fromIndex: from_index, limit: limit});\n    }\n\n    @view\n    //get a sale information for a given unique sale ID (contract + DELIMITER + token ID)\n    get_sale({nft_contract_token}:{nft_contract_token: string}): Sale {\n        return internalGetSale({contract: this, nftContractToken: nft_contract_token});\n    }\n\n    /*\n        APPROVALS\n    */\n    @call\n        /// where we add the sale because we know nft owner can only call nft_approve\n        nft_on_approve({token_id, owner_id, approval_id, msg}:{token_id: string, owner_id: string, approval_id: number, msg: string}) {\n        return internalNftOnApprove({contract: this, tokenId: token_id, ownerId: owner_id, approvalId: approval_id, msg: msg});\n    }  \n\n}"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","signerAccountId","signer_account_id","read_register","predecessorAccountId","predecessor_account_id","attachedDeposit","attached_deposit","panic","msg","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","currentAccountId","current_account_id","input","promiseThen","promiseIndex","accountId","methodName","amount","gas","promise_then","promiseBatchCreate","promise_batch_create","promiseBatchActionFunctionCall","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","PromiseResult","promiseResult","resultIdx","status","promise_result","Successful","Failed","NotReady","promiseReturn","promiseIdx","promise_return","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","strOrU8Array","checkStringIsBytes","str","assert","b","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","restoreOwners","collection","assertOneYocto","toString","internallyRemoveSale","contract","nftContractId","tokenId","contractAndTokenId","DELIMETER","sale","sales","byOwnerId","owner_id","byNftContractId","GAS_FOR_ROYALTIES","GAS_FOR_NFT_TRANSFER","Sale","ownerId","approvalId","saleConditions","approval_id","nft_contract_id","token_id","sale_conditions","internalRemoveSale","internalUpdatePrice","price","internalOffer","deposit","valueOf","buyerId","BigInt","processPurchase","promise","receiver_id","memo","balance","max_len_payout","buyer_id","internalResolvePurchase","result","payout","payoutOption","remainder","entries","forEach","internalSupplySales","internalSupplyByOwnerId","internalSalesByOwnerId","fromIndex","limit","tokenSet","start","parseInt","max","internalSupplyByNftContractId","internalSalesByNftContractId","internalGetSale","nftContractToken","internalNftOnApprove","contractId","signerId","storageAmount","storage_minimum_balance","ownerPaidStorage","storageDeposits","signerStorageRequired","hasOwnProperty","NFT_METADATA_SPEC","NFT_STANDARD_NAME","STORAGE_PER_SALE","Contract","storage_deposit","account_id","storageAccountId","newBalance","storage_withdraw","diff","amountLeft","storage_balance_of","remove_sale","update_price","offer","resolve_purchase","get_supply_sales","get_supply_by_owner_id","get_sales_by_owner_id","from_index","get_supply_by_nft_contract_id","get_sales_by_nft_contract_id","get_sale","nft_contract_token","nft_on_approve"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,IAAT,CAAcC,MAAd,EAAsBC,GAAtB,EAA2BC,UAA3B,EAAuC,EAC7C;AACM,SAASC,IAAT,CAAcH,MAAd,EAAsBC,GAAtB,EAA2BC,UAA3B,EAAuC,EAC7C;AACM,SAASE,WAAT,CAAqBJ,MAArB,EAA6B;EAChC,OAAO,cAAcA,MAAd,CAAqB;AACZ,IAAA,OAALK,KAAK,GAAG;AACX;AACA,MAAA,IAAIC,IAAI,GAAGN,MAAM,CAACO,eAAP,EAAX,CAAA;MACA,IAAIC,GAAG,GAAG,IAAIR,MAAJ,CAAWM,IAAX,CAAV,CAHW;;MAKXE,GAAG,CAACC,IAAJ,EAAA,CALW;;AAOXD,MAAAA,GAAG,CAACE,SAAJ,EAAA,CAAA;AACA,MAAA,OAAOF,GAAP,CAAA;AACH,KAAA;;AACU,IAAA,OAAJG,IAAI,GAAG;MACV,IAAIH,GAAG,GAAGI,MAAM,CAACC,MAAP,CAAcb,MAAM,CAACc,SAArB,CAAV,CAAA;AACA,MAAA,OAAON,GAAP,CAAA;AACH,KAAA;;GAdL,CAAA;AAgBH;;ACrBD,MAAMO,OAAO,GAAG,EAAM,IAAA,GAAN,GAAY,EAA5B,CAAA;AACA,MAAMC,gBAAgB,GAAGD,OAAO,GAAG,EAAnC,CAAA;AACO,SAASE,GAAT,CAAa,GAAGC,MAAhB,EAAwB;AAC3BC,EAAAA,GAAG,CAACF,GAAJ,CAAS,CAAEC,EAAAA,MAAM,CACZE,GADM,CACFC,CAAC,IAAIA,CAAC,KAAKC,SAAN,GAAkB,WAAlB,GAAgCD,CADnC,CACsC;AADtC,GAEND,GAFM,CAEFC,CAAC,IAAI,OAAQA,CAAR,KAAe,QAAf,GAA0BE,IAAI,CAACC,SAAL,CAAeH,CAAf,CAA1B,GAA8CA,CAFjD,CAEoD;AAFpD,GAGNI,IAHM,CAGD,GAHC,CAGI,EAHf;AAAA,GAAA,CAAA;AAKH,CAAA;AACM,SAASC,eAAT,GAA2B;EAC9BP,GAAG,CAACQ,iBAAJ,CAAsB,CAAtB,CAAA,CAAA;AACA,EAAA,OAAOR,GAAG,CAACS,aAAJ,CAAkB,CAAlB,CAAP,CAAA;AACH,CAAA;AAKM,SAASC,oBAAT,GAAgC;EACnCV,GAAG,CAACW,sBAAJ,CAA2B,CAA3B,CAAA,CAAA;AACA,EAAA,OAAOX,GAAG,CAACS,aAAJ,CAAkB,CAAlB,CAAP,CAAA;AACH,CAAA;AAaM,SAASG,eAAT,GAA2B;EAC9B,OAAOZ,GAAG,CAACa,gBAAJ,EAAP,CAAA;AACH,CAAA;AAkCM,SAASC,KAAT,CAAeC,GAAf,EAAoB;EACvB,IAAIA,GAAG,KAAKZ,SAAZ,EAAuB;IACnBH,GAAG,CAACc,KAAJ,CAAUC,GAAV,CAAA,CAAA;AACH,GAFD,MAGK;AACDf,IAAAA,GAAG,CAACc,KAAJ,EAAA,CAAA;AACH,GAAA;AACJ,CAAA;AAUM,SAASE,WAAT,CAAqBlC,GAArB,EAA0B;EAC7B,IAAIO,GAAG,GAAGW,GAAG,CAACiB,YAAJ,CAAiBnC,GAAjB,EAAsB,CAAtB,CAAV,CAAA;;EACA,IAAIO,GAAG,KAAK,EAAZ,EAAgB;AACZ,IAAA,OAAOW,GAAG,CAACS,aAAJ,CAAkB,CAAlB,CAAP,CAAA;AACH,GAFD,MAGK;AACD,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;AACJ,CAAA;AACM,SAASS,aAAT,CAAuBpC,GAAvB,EAA4B;AAC/B,EAAA,IAAIO,GAAG,GAAGW,GAAG,CAACmB,eAAJ,CAAoBrC,GAApB,CAAV,CAAA;;EACA,IAAIO,GAAG,KAAK,EAAZ,EAAgB;AACZ,IAAA,OAAO,IAAP,CAAA;AACH,GAFD,MAGK;AACD,IAAA,OAAO,KAAP,CAAA;AACH,GAAA;AACJ,CAAA;AA+EM,SAAS+B,iBAAT,GAA6B;AAChC,EAAA,OAAOpB,GAAG,CAACS,aAAJ,CAAkBZ,gBAAlB,CAAP,CAAA;AACH,CAAA;;AAKM,SAASwB,gBAAT,GAA4B;EAC/BrB,GAAG,CAACsB,kBAAJ,CAAuB,CAAvB,CAAA,CAAA;AACA,EAAA,OAAOtB,GAAG,CAACS,aAAJ,CAAkB,CAAlB,CAAP,CAAA;AACH,CAAA;AACM,SAASc,KAAT,GAAiB;EACpBvB,GAAG,CAACuB,KAAJ,CAAU,CAAV,CAAA,CAAA;AACA,EAAA,OAAOvB,GAAG,CAACS,aAAJ,CAAkB,CAAlB,CAAP,CAAA;AACH,CAAA;AAgBM,SAASe,WAAT,CAAqBC,YAArB,EAAmCC,SAAnC,EAA8CC,UAA9C,EAA0DxC,IAA1D,EAAgEyC,MAAhE,EAAwEC,GAAxE,EAA6E;AAChF,EAAA,OAAO7B,GAAG,CAAC8B,YAAJ,CAAiBL,YAAjB,EAA+BC,SAA/B,EAA0CC,UAA1C,EAAsDxC,IAAtD,EAA4DyC,MAA5D,EAAoEC,GAApE,CAAP,CAAA;AACH,CAAA;AAIM,SAASE,kBAAT,CAA4BL,SAA5B,EAAuC;AAC1C,EAAA,OAAO1B,GAAG,CAACgC,oBAAJ,CAAyBN,SAAzB,CAAP,CAAA;AACH,CAAA;AAUM,SAASO,8BAAT,CAAwCR,YAAxC,EAAsDE,UAAtD,EAAkExC,IAAlE,EAAwEyC,MAAxE,EAAgFC,GAAhF,EAAqF;EACxF7B,GAAG,CAACkC,kCAAJ,CAAuCT,YAAvC,EAAqDE,UAArD,EAAiExC,IAAjE,EAAuEyC,MAAvE,EAA+EC,GAA/E,CAAA,CAAA;AACH,CAAA;AACM,SAASM,0BAAT,CAAoCV,YAApC,EAAkDG,MAAlD,EAA0D;AAC7D5B,EAAAA,GAAG,CAACoC,6BAAJ,CAAkCX,YAAlC,EAAgDG,MAAhD,CAAA,CAAA;AACH,CAAA;AAmBM,IAAIS,aAAJ,CAAA;;AACP,CAAC,UAAUA,aAAV,EAAyB;EACtBA,aAAa,CAACA,aAAa,CAAC,UAAD,CAAb,GAA4B,CAA7B,CAAb,GAA+C,UAA/C,CAAA;EACAA,aAAa,CAACA,aAAa,CAAC,YAAD,CAAb,GAA8B,CAA/B,CAAb,GAAiD,YAAjD,CAAA;EACAA,aAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,CAA3B,CAAb,GAA6C,QAA7C,CAAA;AACH,CAJD,EAIGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAJhB,CAAA,CAAA;;AAKO,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;EACrC,IAAIC,MAAM,GAAGxC,GAAG,CAACyC,cAAJ,CAAmBF,SAAnB,EAA8B,CAA9B,CAAb,CAAA;;AACA,EAAA,IAAIC,MAAM,IAAIH,aAAa,CAACK,UAA5B,EAAwC;AACpC,IAAA,OAAO1C,GAAG,CAACS,aAAJ,CAAkB,CAAlB,CAAP,CAAA;AACH,GAFD,MAGK,IAAI+B,MAAM,IAAIH,aAAa,CAACM,MAAxB,IACLH,MAAM,IAAIH,aAAa,CAACO,QADvB,EACiC;AAClC,IAAA,OAAOJ,MAAP,CAAA;AACH,GAHI,MAIA;AACD1B,IAAAA,KAAK,CAAE,CAAA,wBAAA,EAA0B0B,MAAO,CAAA,CAAnC,CAAL,CAAA;AACH,GAAA;AACJ,CAAA;AACM,SAASK,aAAT,CAAuBC,UAAvB,EAAmC;EACtC9C,GAAG,CAAC+C,cAAJ,CAAmBD,UAAnB,CAAA,CAAA;AACH,CAAA;AACM,SAASE,YAAT,CAAsBlE,GAAtB,EAA2BmE,KAA3B,EAAkC;EACrC,IAAIC,KAAK,GAAGlD,GAAG,CAACmD,aAAJ,CAAkBrE,GAAlB,EAAuBmE,KAAvB,EAA8BpD,gBAA9B,CAAZ,CAAA;;EACA,IAAIqD,KAAK,KAAK,EAAd,EAAkB;AACd,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;AACD,EAAA,OAAO,KAAP,CAAA;AACH,CAAA;AACM,SAASE,aAAT,CAAuBtE,GAAvB,EAA4B;EAC/B,IAAIoE,KAAK,GAAGlD,GAAG,CAACqD,cAAJ,CAAmBvE,GAAnB,EAAwBe,gBAAxB,CAAZ,CAAA;;EACA,IAAIqD,KAAK,KAAK,EAAd,EAAkB;AACd,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;AACD,EAAA,OAAO,KAAP,CAAA;AACH,CAAA;AACM,SAASI,eAAT,GAA2B;AAC9B,EAAA,OAAO,qBAAP,CAAA;AACH;;ACnSM,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,GAAG;AACV,IAAA,MAAMC,QAAQ,GAAGC,WAAA,CAAiB,OAAjB,CAAjB,CAAA;;AACA,IAAA,IAAID,QAAJ,EAAc;MACV,MAAME,KAAK,GAAGvD,IAAI,CAACwD,KAAL,CAAWH,QAAX,CAAd,CADU;;AAGV,MAAA,IAAII,CAAC,GAAG,IAAKC,CAAAA,OAAL,EAAR,CAAA;AACArE,MAAAA,MAAM,CAACsE,MAAP,CAAc,IAAd,EAAoBJ,KAApB,CAAA,CAAA;;AACA,MAAA,KAAK,MAAMK,IAAX,IAAmBH,CAAnB,EAAsB;QAClB,IAAIA,CAAC,CAACG,IAAD,CAAD,CAAQC,WAAR,EAAqBT,WAArB,KAAqCrD,SAAzC,EAAoD;AAChD,UAAA,IAAA,CAAK6D,IAAL,CAAA,GAAaH,CAAC,CAACG,IAAD,CAAD,CAAQC,WAAR,CAAoBT,WAApB,CAAgC,IAAKQ,CAAAA,IAAL,CAAhC,CAAb,CAAA;AACH,SAAA;AACJ,OAAA;AACJ,KAVD,MAWK;AACD,MAAA,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN,CAAA;AACH,KAAA;AACJ,GAAA;;AACD3E,EAAAA,SAAS,GAAG;IACRmE,YAAA,CAAkB,OAAlB,EAA2BtD,IAAI,CAACC,SAAL,CAAe,IAAf,CAA3B,CAAA,CAAA;AACH,GAAA;;AACqB,EAAA,OAAfjB,eAAe,GAAG;AACrB,IAAA,IAAID,IAAI,GAAGuE,KAAA,EAAX,CAAA;AACA,IAAA,OAAOtD,IAAI,CAACwD,KAAL,CAAWzE,IAAI,IAAI,IAAnB,CAAP,CAAA;AACH,GAAA;;EACqB,OAAfgF,eAAe,CAAC9E,GAAD,EAAM;AACxB,IAAA,OAAOe,IAAI,CAACC,SAAL,CAAehB,GAAf,CAAP,CAAA;AACH,GAAA;;AACDC,EAAAA,IAAI,GAAG,EAAG;;AA5BY;;ACAnB,MAAM8E,SAAN,CAAgB;EACnBH,WAAW,CAACI,SAAD,EAAY;IACnB,IAAKA,CAAAA,SAAL,GAAiBA,SAAjB,CAAA;AACH,GAAA;;EACDC,WAAW,CAACxF,GAAD,EAAM;IACb,IAAIyF,UAAU,GAAG,IAAA,CAAKF,SAAL,GAAiBjE,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAlC,CAAA;AACA,IAAA,OAAO4E,aAAA,CAAmBa,UAAnB,CAAP,CAAA;AACH,GAAA;;EACDC,GAAG,CAAC1F,GAAD,EAAM;IACL,IAAIyF,UAAU,GAAG,IAAA,CAAKF,SAAL,GAAiBjE,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAlC,CAAA;AACA,IAAA,IAAI2F,GAAG,GAAGf,WAAA,CAAiBa,UAAjB,CAAV,CAAA;;IACA,IAAIE,GAAG,KAAK,IAAZ,EAAkB;AACd,MAAA,OAAOrE,IAAI,CAACwD,KAAL,CAAWa,GAAX,CAAP,CAAA;AACH,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;EACDC,MAAM,CAAC5F,GAAD,EAAM;IACR,IAAIyF,UAAU,GAAG,IAAA,CAAKF,SAAL,GAAiBjE,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAlC,CAAA;;AACA,IAAA,IAAI4E,aAAA,CAAmBa,UAAnB,CAAJ,EAAoC;MAChC,OAAOnE,IAAI,CAACwD,KAAL,CAAWF,iBAAA,EAAX,CAAP,CAAA;AACH,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;AACDiB,EAAAA,GAAG,CAAC7F,GAAD,EAAMmE,KAAN,EAAa;IACZ,IAAIsB,UAAU,GAAG,IAAA,CAAKF,SAAL,GAAiBjE,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAlC,CAAA;AACA,IAAA,IAAI8F,YAAY,GAAGxE,IAAI,CAACC,SAAL,CAAe4C,KAAf,CAAnB,CAAA;;IACA,IAAIS,YAAA,CAAkBa,UAAlB,EAA8BK,YAA9B,CAAJ,EAAiD;MAC7C,OAAOxE,IAAI,CAACwD,KAAL,CAAWF,iBAAA,EAAX,CAAP,CAAA;AACH,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;EACDmB,MAAM,CAACC,OAAD,EAAU;AACZ,IAAA,KAAK,IAAIC,EAAT,IAAeD,OAAf,EAAwB;MACpB,IAAKH,CAAAA,GAAL,CAASI,EAAE,CAAC,CAAD,CAAX,EAAgBA,EAAE,CAAC,CAAD,CAAlB,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;AACDxF,EAAAA,SAAS,GAAG;AACR,IAAA,OAAOa,IAAI,CAACC,SAAL,CAAe,IAAf,CAAP,CAAA;AACH,GAtCkB;;;EAwCD,OAAXmD,WAAW,CAACwB,IAAD,EAAO;AACrB,IAAA,OAAO,IAAIZ,SAAJ,CAAcY,IAAI,CAACX,SAAnB,CAAP,CAAA;AACH,GAAA;;AA1CkB;;ACDhB,SAASY,cAAT,CAAwBC,KAAxB,EAA+B;EAClC,IAAI7F,GAAG,GAAG,EAAV,CAAA;;AACA,EAAA,KAAK,IAAI8F,CAAT,IAAcD,KAAd,EAAqB;AACjB7F,IAAAA,GAAG,IAAI+F,MAAM,CAACC,YAAP,CAAoBF,CAApB,CAAP,CAAA;AACH,GAAA;;AACD,EAAA,OAAO9F,GAAP,CAAA;AACH;AAED;;AACO,SAASiG,cAAT,CAAwBC,KAAxB,EAA+B;EAClC,IAAIlG,GAAG,GAAG,IAAImG,UAAJ,CAAeD,KAAK,CAACE,MAArB,CAAV,CAAA;;AACA,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACE,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;IACnCrG,GAAG,CAACqG,CAAD,CAAH,GAASH,KAAK,CAACI,UAAN,CAAiBD,CAAjB,CAAT,CAAA;AACH,GAAA;;AACD,EAAA,OAAOrG,GAAP,CAAA;AACH,CAAA;AACM,SAASkG,KAAT,CAAeK,YAAf,EAA6B;AAChC,EAAA,IAAI,OAAOA,YAAP,IAAuB,QAA3B,EAAqC;IACjC,OAAOC,kBAAkB,CAACD,YAAD,CAAzB,CAAA;AACH,GAFD,MAGK,IAAIA,YAAY,YAAYJ,UAA5B,EAAwC;IACzC,OAAOP,cAAc,CAACW,YAAD,CAArB,CAAA;AACH,GAAA;;AACD,EAAA,MAAM,IAAI1B,KAAJ,CAAU,sCAAV,CAAN,CAAA;AACH,CAAA;;AACD,SAAS2B,kBAAT,CAA4BC,GAA5B,EAAiC;AAC7B,EAAA,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,GAAG,CAACL,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACjC,IAAA,IAAII,GAAG,CAACH,UAAJ,CAAeD,CAAf,CAAA,GAAoB,GAAxB,EAA6B;AACzB,MAAA,MAAM,IAAIxB,KAAJ,CAAW,CAAA,OAAA,EAAS4B,GAAI,CAAA,UAAA,EAAYJ,CAAE,CAAA,EAAA,EAAII,GAAG,CAACJ,CAAD,CAAI,sBAAjD,CAAN,CAAA;AACH,KAAA;AACJ,GAAA;;AACD,EAAA,OAAOI,GAAP,CAAA;AACH,CAAA;;AACM,SAASC,MAAT,CAAgBC,CAAhB,EAAmBF,GAAnB,EAAwB;AAC3B,EAAA,IAAIE,CAAJ,EAAO;AACH,IAAA,OAAA;AACH,GAFD,MAGK;AACD,IAAA,MAAM9B,KAAK,CAAC,oBAAuB4B,GAAAA,GAAxB,CAAX,CAAA;AACH,GAAA;AACJ;;ACtCD,MAAMG,uBAAuB,GAAG,qBAAhC,CAAA;AACA,MAAMC,wBAAsB,GAAG,wGAA/B,CAAA;;AACA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmC;EAC/B,IAAIrB,IAAI,GAAG,IAAIsB,WAAJ,CAAgB,CAACD,KAAD,CAAhB,CAAX,CAAA;EACA,IAAInB,KAAK,GAAG,IAAIM,UAAJ,CAAeR,IAAI,CAACuB,MAApB,CAAZ,CAAA;AACA,EAAA,IAAIzH,GAAG,GAAGmG,cAAc,CAACC,KAAD,CAAxB,CAAA;EACA,OAAOkB,MAAM,GAAGtH,GAAhB,CAAA;AACH;AAED;;;AACO,MAAM0H,MAAN,CAAa;EAChBvC,WAAW,CAACmC,MAAD,EAAS;IAChB,IAAKX,CAAAA,MAAL,GAAc,CAAd,CAAA;IACA,IAAKW,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACH,GAAA;;AACDK,EAAAA,GAAG,GAAG;AACF,IAAA,OAAO,KAAKhB,MAAZ,CAAA;AACH,GAAA;;AACDiB,EAAAA,OAAO,GAAG;IACN,OAAO,IAAA,CAAKjB,MAAL,IAAe,CAAtB,CAAA;AACH,GAAA;;EACDjB,GAAG,CAAC6B,KAAD,EAAQ;AACP,IAAA,IAAIA,KAAK,IAAI,IAAKZ,CAAAA,MAAlB,EAA0B;AACtB,MAAA,OAAO,IAAP,CAAA;AACH,KAAA;;IACD,IAAIlB,UAAU,GAAG4B,UAAU,CAAC,KAAKC,MAAN,EAAcC,KAAd,CAA3B,CAAA;IACA,OAAOjG,IAAI,CAACwD,KAAL,CAAWF,WAAA,CAAiBa,UAAjB,CAAX,CAAP,CAAA;AACH,GAjBe;AAmBhB;AACA;;;EACAoC,UAAU,CAACN,KAAD,EAAQ;AACd,IAAA,IAAIA,KAAK,IAAI,IAAKZ,CAAAA,MAAlB,EAA0B;AACtB,MAAA,MAAM,IAAIvB,KAAJ,CAAU+B,uBAAV,CAAN,CAAA;KADJ,MAGK,IAAII,KAAK,GAAG,CAAR,IAAa,IAAA,CAAKZ,MAAtB,EAA8B;MAC/B,OAAO,IAAA,CAAKmB,GAAL,EAAP,CAAA;AACH,KAFI,MAGA;MACD,IAAI9H,GAAG,GAAGqH,UAAU,CAAC,KAAKC,MAAN,EAAcC,KAAd,CAApB,CAAA;AACA,MAAA,IAAIQ,IAAI,GAAG,IAAKD,CAAAA,GAAL,EAAX,CAAA;;AACA,MAAA,IAAIlD,YAAA,CAAkB5E,GAAlB,EAAuBsB,IAAI,CAACC,SAAL,CAAewG,IAAf,CAAvB,CAAJ,EAAkD;QAC9C,OAAOzG,IAAI,CAACwD,KAAL,CAAWF,iBAAA,EAAX,CAAP,CAAA;AACH,OAFD,MAGK;AACD,QAAA,MAAM,IAAIQ,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,OAAA;AACJ,KAAA;AACJ,GAAA;;EACDY,IAAI,CAACC,OAAD,EAAU;IACV,IAAIjI,GAAG,GAAGqH,UAAU,CAAC,KAAKC,MAAN,EAAc,IAAKX,CAAAA,MAAnB,CAApB,CAAA;IACA,IAAKA,CAAAA,MAAL,IAAe,CAAf,CAAA;IACA/B,YAAA,CAAkB5E,GAAlB,EAAuBsB,IAAI,CAACC,SAAL,CAAe0G,OAAf,CAAvB,CAAA,CAAA;AACH,GAAA;;AACDH,EAAAA,GAAG,GAAG;IACF,IAAI,IAAA,CAAKF,OAAL,EAAJ,EAAoB;AAChB,MAAA,OAAO,IAAP,CAAA;AACH,KAFD,MAGK;AACD,MAAA,IAAIM,SAAS,GAAG,IAAKvB,CAAAA,MAAL,GAAc,CAA9B,CAAA;MACA,IAAIwB,OAAO,GAAGd,UAAU,CAAC,KAAKC,MAAN,EAAcY,SAAd,CAAxB,CAAA;MACA,IAAKvB,CAAAA,MAAL,IAAe,CAAf,CAAA;;AACA,MAAA,IAAI/B,aAAA,CAAmBuD,OAAnB,CAAJ,EAAiC;QAC7B,OAAO7G,IAAI,CAACwD,KAAL,CAAWF,iBAAA,EAAX,CAAP,CAAA;AACH,OAFD,MAGK;AACD,QAAA,MAAM,IAAIQ,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,OAAA;AACJ,KAAA;AACJ,GAAA;;AACDgB,EAAAA,OAAO,CAACb,KAAD,EAAQU,OAAR,EAAiB;AACpB,IAAA,IAAIV,KAAK,IAAI,IAAKZ,CAAAA,MAAlB,EAA0B;AACtB,MAAA,MAAM,IAAIvB,KAAJ,CAAU+B,uBAAV,CAAN,CAAA;AACH,KAFD,MAGK;MACD,IAAInH,GAAG,GAAGqH,UAAU,CAAC,KAAKC,MAAN,EAAcC,KAAd,CAApB,CAAA;;AACA,MAAA,IAAI3C,YAAA,CAAkB5E,GAAlB,EAAuBsB,IAAI,CAACC,SAAL,CAAe0G,OAAf,CAAvB,CAAJ,EAAqD;QACjD,OAAO3G,IAAI,CAACwD,KAAL,CAAWF,iBAAA,EAAX,CAAP,CAAA;AACH,OAFD,MAGK;AACD,QAAA,MAAM,IAAIQ,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,OAAA;AACJ,KAAA;AACJ,GAAA;;EACDrB,MAAM,CAACsC,QAAD,EAAW;AACb,IAAA,KAAK,IAAIJ,OAAT,IAAoBI,QAApB,EAA8B;MAC1B,IAAKL,CAAAA,IAAL,CAAUC,OAAV,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;EACe,CAAfK,MAAM,CAACC,QAAQ,CAAI,GAAA;AAChB,IAAA,OAAO,IAAIC,cAAJ,CAAmB,IAAnB,CAAP,CAAA;AACH,GAAA;;AACDC,EAAAA,KAAK,GAAG;AACJ,IAAA,KAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAAA,CAAKD,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;MAClC,IAAI5G,GAAG,GAAGqH,UAAU,CAAC,KAAKC,MAAN,EAAcV,CAAd,CAApB,CAAA;MACAhC,aAAA,CAAmB5E,GAAnB,CAAA,CAAA;AACH,KAAA;;IACD,IAAK2G,CAAAA,MAAL,GAAc,CAAd,CAAA;AACH,GAAA;;AACD+B,EAAAA,OAAO,GAAG;IACN,IAAInI,GAAG,GAAG,EAAV,CAAA;;AACA,IAAA,KAAK,IAAIoI,CAAT,IAAc,IAAd,EAAoB;MAChBpI,GAAG,CAACyH,IAAJ,CAASW,CAAT,CAAA,CAAA;AACH,KAAA;;AACD,IAAA,OAAOpI,GAAP,CAAA;AACH,GAAA;;AACDE,EAAAA,SAAS,GAAG;AACR,IAAA,OAAOa,IAAI,CAACC,SAAL,CAAe,IAAf,CAAP,CAAA;AACH,GAlGe;;;EAoGE,OAAXmD,WAAW,CAACwB,IAAD,EAAO;IACrB,IAAI0C,MAAM,GAAG,IAAIlB,MAAJ,CAAWxB,IAAI,CAACoB,MAAhB,CAAb,CAAA;AACAsB,IAAAA,MAAM,CAACjC,MAAP,GAAgBT,IAAI,CAACS,MAArB,CAAA;AACA,IAAA,OAAOiC,MAAP,CAAA;AACH,GAAA;;AAxGe,CAAA;AA0Gb,MAAMJ,cAAN,CAAqB;EACxBrD,WAAW,CAACyD,MAAD,EAAS;IAChB,IAAKC,CAAAA,OAAL,GAAe,CAAf,CAAA;IACA,IAAKD,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACH,GAAA;;AACDE,EAAAA,IAAI,GAAG;IACH,IAAI,IAAA,CAAKD,OAAL,GAAe,IAAA,CAAKD,MAAL,CAAYjB,GAAZ,EAAnB,EAAsC;MAClC,IAAIxD,KAAK,GAAG,IAAKyE,CAAAA,MAAL,CAAYlD,GAAZ,CAAgB,IAAKmD,CAAAA,OAArB,CAAZ,CAAA;MACA,IAAKA,CAAAA,OAAL,IAAgB,CAAhB,CAAA;MACA,OAAO;QAAE1E,KAAF;AAAS4E,QAAAA,IAAI,EAAE,KAAA;OAAtB,CAAA;AACH,KAAA;;IACD,OAAO;AAAE5E,MAAAA,KAAK,EAAE,IAAT;AAAe4E,MAAAA,IAAI,EAAE,IAAA;KAA5B,CAAA;AACH,GAAA;;AAZuB;;ACnH5B,MAAM3B,wBAAsB,GAAG,wGAA/B,CAAA;AACO,MAAM4B,YAAN,CAAmB;EACtB7D,WAAW,CAACmC,MAAD,EAAS;IAChB,IAAKX,CAAAA,MAAL,GAAc,CAAd,CAAA;IACA,IAAKW,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACA,IAAA,IAAA,CAAK2B,cAAL,GAAsB3B,MAAM,GAAG,GAA/B,CAAA;AACA,IAAA,IAAI4B,QAAQ,GAAG5B,MAAM,GAAG,GAAxB,CAAA;AACA,IAAA,IAAI6B,UAAU,GAAG7B,MAAM,GAAG,GAA1B,CAAA;AACA,IAAA,IAAA,CAAK8B,IAAL,GAAY,IAAI1B,MAAJ,CAAWwB,QAAX,CAAZ,CAAA;AACA,IAAA,IAAA,CAAKG,MAAL,GAAc,IAAI3B,MAAJ,CAAWyB,UAAX,CAAd,CAAA;AACH,GAAA;;AACDxB,EAAAA,GAAG,GAAG;AACF,IAAA,IAAI2B,OAAO,GAAG,IAAA,CAAKF,IAAL,CAAUzB,GAAV,EAAd,CAAA;AACA,IAAA,IAAI4B,SAAS,GAAG,IAAA,CAAKF,MAAL,CAAY1B,GAAZ,EAAhB,CAAA;;IACA,IAAI2B,OAAO,IAAIC,SAAf,EAA0B;AACtB,MAAA,MAAM,IAAInE,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,KAAA;;AACD,IAAA,OAAOkC,OAAP,CAAA;AACH,GAAA;;AACD1B,EAAAA,OAAO,GAAG;AACN,IAAA,IAAI4B,WAAW,GAAG,IAAA,CAAKJ,IAAL,CAAUxB,OAAV,EAAlB,CAAA;AACA,IAAA,IAAI6B,aAAa,GAAG,IAAA,CAAKJ,MAAL,CAAYzB,OAAZ,EAApB,CAAA;;IACA,IAAI4B,WAAW,IAAIC,aAAnB,EAAkC;AAC9B,MAAA,MAAM,IAAIrE,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,KAAA;;AACD,IAAA,OAAOoC,WAAP,CAAA;AACH,GAAA;;EACDE,cAAc,CAACnC,KAAD,EAAQ;IAClB,IAAIrB,IAAI,GAAG,IAAIsB,WAAJ,CAAgB,CAACD,KAAD,CAAhB,CAAX,CAAA;IACA,IAAInB,KAAK,GAAG,IAAIM,UAAJ,CAAeR,IAAI,CAACuB,MAApB,CAAZ,CAAA;IACA,OAAOtB,cAAc,CAACC,KAAD,CAArB,CAAA;AACH,GAAA;;EACDuD,gBAAgB,CAACC,QAAD,EAAW;AACvB,IAAA,IAAIxD,KAAK,GAAGI,cAAc,CAACoD,QAAD,CAA1B,CAAA;IACA,IAAI1D,IAAI,GAAG,IAAIsB,WAAJ,CAAgBpB,KAAK,CAACqB,MAAtB,CAAX,CAAA;IACA,OAAOvB,IAAI,CAAC,CAAD,CAAX,CAAA;AACH,GAAA;;EACD2D,WAAW,CAAC7J,GAAD,EAAM;IACb,IAAI8J,WAAW,GAAG,IAAA,CAAKb,cAAL,GAAsB3H,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAxC,CAAA;AACA,IAAA,IAAI+J,QAAQ,GAAGnF,WAAA,CAAiBkF,WAAjB,CAAf,CAAA;AACA,IAAA,OAAOC,QAAP,CAAA;AACH,GAAA;;EACDrE,GAAG,CAAC1F,GAAD,EAAM;AACL,IAAA,IAAI+J,QAAQ,GAAG,IAAA,CAAKF,WAAL,CAAiB7J,GAAjB,CAAf,CAAA;;AACA,IAAA,IAAI+J,QAAJ,EAAc;AACV,MAAA,IAAIxC,KAAK,GAAG,IAAA,CAAKoC,gBAAL,CAAsBI,QAAtB,CAAZ,CAAA;MACA,IAAI5F,KAAK,GAAG,IAAKkF,CAAAA,MAAL,CAAY3D,GAAZ,CAAgB6B,KAAhB,CAAZ,CAAA;;AACA,MAAA,IAAIpD,KAAJ,EAAW;AACP,QAAA,OAAOA,KAAP,CAAA;AACH,OAFD,MAGK;AACD,QAAA,MAAM,IAAIiB,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,OAAA;AACJ,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;AACDvB,EAAAA,GAAG,CAAC7F,GAAD,EAAMmE,KAAN,EAAa;IACZ,IAAI2F,WAAW,GAAG,IAAA,CAAKb,cAAL,GAAsB3H,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAxC,CAAA;AACA,IAAA,IAAI+J,QAAQ,GAAGnF,WAAA,CAAiBkF,WAAjB,CAAf,CAAA;;AACA,IAAA,IAAIC,QAAJ,EAAc;AACV,MAAA,IAAIxC,KAAK,GAAG,IAAA,CAAKoC,gBAAL,CAAsBI,QAAtB,CAAZ,CAAA;MACA,OAAO,IAAA,CAAKV,MAAL,CAAYjB,OAAZ,CAAoBb,KAApB,EAA2BpD,KAA3B,CAAP,CAAA;AACH,KAHD,MAIK;AACD,MAAA,IAAI6F,SAAS,GAAG,IAAKrC,CAAAA,GAAL,EAAhB,CAAA;AACA,MAAA,IAAIsC,YAAY,GAAG,IAAA,CAAKP,cAAL,CAAoBM,SAApB,CAAnB,CAAA;AACApF,MAAAA,YAAA,CAAkBkF,WAAlB,EAA+BG,YAA/B,CAAA,CAAA;AACA,MAAA,IAAA,CAAKb,IAAL,CAAUpB,IAAV,CAAehI,GAAf,CAAA,CAAA;AACA,MAAA,IAAA,CAAKqJ,MAAL,CAAYrB,IAAZ,CAAiB7D,KAAjB,CAAA,CAAA;AACA,MAAA,OAAO,IAAP,CAAA;AACH,KAAA;AACJ,GAAA;;EACDyB,MAAM,CAAC5F,GAAD,EAAM;IACR,IAAI8J,WAAW,GAAG,IAAA,CAAKb,cAAL,GAAsB3H,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAxC,CAAA;AACA,IAAA,IAAI+J,QAAQ,GAAGnF,WAAA,CAAiBkF,WAAjB,CAAf,CAAA;;AACA,IAAA,IAAIC,QAAJ,EAAc;AACV,MAAA,IAAI,IAAKpC,CAAAA,GAAL,EAAc,IAAA,CAAlB,EAAqB;AACjB;AACA;QACA/C,aAAA,CAAmBkF,WAAnB,CAAA,CAAA;AACH,OAJD,MAKK;AACD;AACA;QACA,IAAI3B,OAAO,GAAG,IAAA,CAAKiB,IAAL,CAAU1D,GAAV,CAAc,IAAKiC,CAAAA,GAAL,EAAa,GAAA,CAA3B,CAAd,CAAA;;QACA,IAAI,CAACQ,OAAL,EAAc;AACV,UAAA,MAAM,IAAI/C,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,SAAA;;AACDxC,QAAAA,aAAA,CAAmBkF,WAAnB,EAPC;AASD;;QACA,IAAI3B,OAAO,IAAInI,GAAf,EAAoB;UAChB,IAAIkK,aAAa,GAAG,IAAA,CAAKjB,cAAL,GAAsB3H,IAAI,CAACC,SAAL,CAAe4G,OAAf,CAA1C,CAAA;AACAvD,UAAAA,YAAA,CAAkBsF,aAAlB,EAAiCH,QAAjC,CAAA,CAAA;AACH,SAAA;AACJ,OAAA;;AACD,MAAA,IAAIxC,KAAK,GAAG,IAAA,CAAKoC,gBAAL,CAAsBI,QAAtB,CAAZ,CAAA;AACA,MAAA,IAAA,CAAKX,IAAL,CAAUvB,UAAV,CAAqBN,KAArB,CAAA,CAAA;AACA,MAAA,OAAO,KAAK8B,MAAL,CAAYxB,UAAZ,CAAuBN,KAAvB,CAAP,CAAA;AACH,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;AACDkB,EAAAA,KAAK,GAAG;AACJ,IAAA,KAAK,IAAIzI,GAAT,IAAgB,IAAA,CAAKoJ,IAArB,EAA2B;MACvB,IAAIU,WAAW,GAAG,IAAA,CAAKb,cAAL,GAAsB3H,IAAI,CAACC,SAAL,CAAevB,GAAf,CAAxC,CAAA;MACA4E,aAAA,CAAmBkF,WAAnB,CAAA,CAAA;AACH,KAAA;;IACD,IAAKV,CAAAA,IAAL,CAAUX,KAAV,EAAA,CAAA;IACA,IAAKY,CAAAA,MAAL,CAAYZ,KAAZ,EAAA,CAAA;AACH,GAAA;;AACDC,EAAAA,OAAO,GAAG;IACN,IAAInI,GAAG,GAAG,EAAV,CAAA;;AACA,IAAA,KAAK,IAAIoI,CAAT,IAAc,IAAd,EAAoB;MAChBpI,GAAG,CAACyH,IAAJ,CAASW,CAAT,CAAA,CAAA;AACH,KAAA;;AACD,IAAA,OAAOpI,GAAP,CAAA;AACH,GAAA;;EACe,CAAf+H,MAAM,CAACC,QAAQ,CAAI,GAAA;AAChB,IAAA,OAAO,IAAI4B,oBAAJ,CAAyB,IAAzB,CAAP,CAAA;AACH,GAAA;;EACDpE,MAAM,CAACqE,GAAD,EAAM;IACR,KAAK,IAAI,CAACC,CAAD,EAAI1B,CAAJ,CAAT,IAAmByB,GAAnB,EAAwB;AACpB,MAAA,IAAA,CAAKvE,GAAL,CAASwE,CAAT,EAAY1B,CAAZ,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;AACDlI,EAAAA,SAAS,GAAG;AACR,IAAA,OAAOa,IAAI,CAACC,SAAL,CAAe,IAAf,CAAP,CAAA;AACH,GA9HqB;;;EAgIJ,OAAXmD,WAAW,CAACwB,IAAD,EAAO;IACrB,IAAI/E,GAAG,GAAG,IAAI6H,YAAJ,CAAiB9C,IAAI,CAACoB,MAAtB,CAAV,CADqB;;AAGrBnG,IAAAA,GAAG,CAACwF,MAAJ,GAAaT,IAAI,CAACS,MAAlB,CAHqB;;IAKrBxF,GAAG,CAACiI,IAAJ,GAAW,IAAI1B,MAAJ,CAAWxB,IAAI,CAACoB,MAAL,GAAc,GAAzB,CAAX,CAAA;IACAnG,GAAG,CAACiI,IAAJ,CAASzC,MAAT,GAAkBT,IAAI,CAACkD,IAAL,CAAUzC,MAA5B,CANqB;;IAQrBxF,GAAG,CAACkI,MAAJ,GAAa,IAAI3B,MAAJ,CAAWxB,IAAI,CAACoB,MAAL,GAAc,GAAzB,CAAb,CAAA;IACAnG,GAAG,CAACkI,MAAJ,CAAW1C,MAAX,GAAoBT,IAAI,CAACmD,MAAL,CAAY1C,MAAhC,CAAA;AACA,IAAA,OAAOxF,GAAP,CAAA;AACH,GAAA;;AA3IqB,CAAA;;AA6I1B,MAAMgJ,oBAAN,CAA2B;EACvBhF,WAAW,CAACmF,YAAD,EAAe;IACtB,IAAKlB,CAAAA,IAAL,GAAY,IAAIZ,cAAJ,CAAmB8B,YAAY,CAAClB,IAAhC,CAAZ,CAAA;IACA,IAAKC,CAAAA,MAAL,GAAc,IAAIb,cAAJ,CAAmB8B,YAAY,CAACjB,MAAhC,CAAd,CAAA;AACH,GAAA;;AACDP,EAAAA,IAAI,GAAG;AACH,IAAA,IAAI9I,GAAG,GAAG,IAAA,CAAKoJ,IAAL,CAAUN,IAAV,EAAV,CAAA;AACA,IAAA,IAAI3E,KAAK,GAAG,IAAA,CAAKkF,MAAL,CAAYP,IAAZ,EAAZ,CAAA;;AACA,IAAA,IAAI9I,GAAG,CAAC+I,IAAJ,IAAY5E,KAAK,CAAC4E,IAAtB,EAA4B;AACxB,MAAA,MAAM,IAAI3D,KAAJ,CAAUgC,wBAAV,CAAN,CAAA;AACH,KAAA;;IACD,OAAO;MAAEjD,KAAK,EAAE,CAACnE,GAAG,CAACmE,KAAL,EAAYA,KAAK,CAACA,KAAlB,CAAT;MAAmC4E,IAAI,EAAE/I,GAAG,CAAC+I,IAAAA;KAApD,CAAA;AACH,GAAA;;AAZsB;;AC9I3B,MAAM3B,sBAAsB,GAAG,wGAA/B,CAAA;AACO,MAAMmD,YAAN,CAAmB;EACtBpF,WAAW,CAACmC,MAAD,EAAS;IAChB,IAAKX,CAAAA,MAAL,GAAc,CAAd,CAAA;IACA,IAAKW,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACA,IAAA,IAAA,CAAKkD,kBAAL,GAA0BlD,MAAM,GAAG,GAAnC,CAAA;AACA,IAAA,IAAImD,cAAc,GAAGnD,MAAM,GAAG,GAA9B,CAAA;AACA,IAAA,IAAA,CAAKe,QAAL,GAAgB,IAAIX,MAAJ,CAAW+C,cAAX,CAAhB,CAAA;AACH,GAAA;;AACD9C,EAAAA,GAAG,GAAG;AACF,IAAA,OAAO,IAAKU,CAAAA,QAAL,CAAcV,GAAd,EAAP,CAAA;AACH,GAAA;;AACDC,EAAAA,OAAO,GAAG;AACN,IAAA,OAAO,IAAKS,CAAAA,QAAL,CAAcT,OAAd,EAAP,CAAA;AACH,GAAA;;EACD8B,cAAc,CAACnC,KAAD,EAAQ;IAClB,IAAIrB,IAAI,GAAG,IAAIsB,WAAJ,CAAgB,CAACD,KAAD,CAAhB,CAAX,CAAA;IACA,IAAInB,KAAK,GAAG,IAAIM,UAAJ,CAAeR,IAAI,CAACuB,MAApB,CAAZ,CAAA;IACA,OAAOtB,cAAc,CAACC,KAAD,CAArB,CAAA;AACH,GAAA;;EACDuD,gBAAgB,CAACC,QAAD,EAAW;AACvB,IAAA,IAAIxD,KAAK,GAAGI,cAAc,CAACoD,QAAD,CAA1B,CAAA;IACA,IAAI1D,IAAI,GAAG,IAAIsB,WAAJ,CAAgBpB,KAAK,CAACqB,MAAtB,CAAX,CAAA;IACA,OAAOvB,IAAI,CAAC,CAAD,CAAX,CAAA;AACH,GAAA;;EACDwE,QAAQ,CAACzC,OAAD,EAAU;IACd,IAAI6B,WAAW,GAAG,IAAA,CAAKU,kBAAL,GAA0BlJ,IAAI,CAACC,SAAL,CAAe0G,OAAf,CAA5C,CAAA;AACA,IAAA,OAAOrD,aAAA,CAAmBkF,WAAnB,CAAP,CAAA;AACH,GAAA;;EACDjE,GAAG,CAACoC,OAAD,EAAU;IACT,IAAI6B,WAAW,GAAG,IAAA,CAAKU,kBAAL,GAA0BlJ,IAAI,CAACC,SAAL,CAAe0G,OAAf,CAA5C,CAAA;;AACA,IAAA,IAAIrD,WAAA,CAAiBkF,WAAjB,CAAJ,EAAmC;AAC/B,MAAA,OAAO,KAAP,CAAA;AACH,KAFD,MAGK;AACD,MAAA,IAAIE,SAAS,GAAG,IAAKrC,CAAAA,GAAL,EAAhB,CAAA;AACA,MAAA,IAAIsC,YAAY,GAAG,IAAA,CAAKP,cAAL,CAAoBM,SAApB,CAAnB,CAAA;AACApF,MAAAA,YAAA,CAAkBkF,WAAlB,EAA+BG,YAA/B,CAAA,CAAA;AACA,MAAA,IAAA,CAAK5B,QAAL,CAAcL,IAAd,CAAmBC,OAAnB,CAAA,CAAA;AACA,MAAA,OAAO,IAAP,CAAA;AACH,KAAA;AACJ,GAAA;;EACDrC,MAAM,CAACqC,OAAD,EAAU;IACZ,IAAI6B,WAAW,GAAG,IAAA,CAAKU,kBAAL,GAA0BlJ,IAAI,CAACC,SAAL,CAAe0G,OAAf,CAA5C,CAAA;AACA,IAAA,IAAI8B,QAAQ,GAAGnF,WAAA,CAAiBkF,WAAjB,CAAf,CAAA;;AACA,IAAA,IAAIC,QAAJ,EAAc;AACV,MAAA,IAAI,IAAKpC,CAAAA,GAAL,EAAc,IAAA,CAAlB,EAAqB;AACjB;AACA;QACA/C,aAAA,CAAmBkF,WAAnB,CAAA,CAAA;AACH,OAJD,MAKK;AACD;AACA;QACA,IAAIa,WAAW,GAAG,IAAA,CAAKtC,QAAL,CAAc3C,GAAd,CAAkB,IAAKiC,CAAAA,GAAL,EAAa,GAAA,CAA/B,CAAlB,CAAA;;QACA,IAAI,CAACgD,WAAL,EAAkB;AACd,UAAA,MAAM,IAAIvF,KAAJ,CAAUgC,sBAAV,CAAN,CAAA;AACH,SAAA;;AACDxC,QAAAA,aAAA,CAAmBkF,WAAnB,EAPC;AASD;;QACA,IAAIa,WAAW,IAAI1C,OAAnB,EAA4B;UACxB,IAAI2C,iBAAiB,GAAG,IAAA,CAAKJ,kBAAL,GAA0BlJ,IAAI,CAACC,SAAL,CAAeoJ,WAAf,CAAlD,CAAA;AACA/F,UAAAA,YAAA,CAAkBgG,iBAAlB,EAAqCb,QAArC,CAAA,CAAA;AACH,SAAA;AACJ,OAAA;;AACD,MAAA,IAAIxC,KAAK,GAAG,IAAA,CAAKoC,gBAAL,CAAsBI,QAAtB,CAAZ,CAAA;AACA,MAAA,IAAA,CAAK1B,QAAL,CAAcR,UAAd,CAAyBN,KAAzB,CAAA,CAAA;AACA,MAAA,OAAO,IAAP,CAAA;AACH,KAAA;;AACD,IAAA,OAAO,KAAP,CAAA;AACH,GAAA;;AACDkB,EAAAA,KAAK,GAAG;AACJ,IAAA,KAAK,IAAIR,OAAT,IAAoB,IAAA,CAAKI,QAAzB,EAAmC;MAC/B,IAAIyB,WAAW,GAAG,IAAA,CAAKU,kBAAL,GAA0BlJ,IAAI,CAACC,SAAL,CAAe0G,OAAf,CAA5C,CAAA;MACArD,aAAA,CAAmBkF,WAAnB,CAAA,CAAA;AACH,KAAA;;IACD,IAAKzB,CAAAA,QAAL,CAAcI,KAAd,EAAA,CAAA;AACH,GAAA;;AACDC,EAAAA,OAAO,GAAG;IACN,IAAInI,GAAG,GAAG,EAAV,CAAA;;AACA,IAAA,KAAK,IAAIoI,CAAT,IAAc,IAAd,EAAoB;MAChBpI,GAAG,CAACyH,IAAJ,CAASW,CAAT,CAAA,CAAA;AACH,KAAA;;AACD,IAAA,OAAOpI,GAAP,CAAA;AACH,GAAA;;EACe,CAAf+H,MAAM,CAACC,QAAQ,CAAI,GAAA;AAChB,IAAA,OAAO,KAAKF,QAAL,CAAcC,MAAM,CAACC,QAArB,CAAP,EAAA,CAAA;AACH,GAAA;;EACDxC,MAAM,CAACsC,QAAD,EAAW;AACb,IAAA,KAAK,IAAIJ,OAAT,IAAoBI,QAApB,EAA8B;MAC1B,IAAKxC,CAAAA,GAAL,CAASoC,OAAT,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;AACDxH,EAAAA,SAAS,GAAG;AACR,IAAA,OAAOa,IAAI,CAACC,SAAL,CAAe,IAAf,CAAP,CAAA;AACH,GA/FqB;;;EAiGJ,OAAXmD,WAAW,CAACwB,IAAD,EAAO;IACrB,IAAIL,GAAG,GAAG,IAAI0E,YAAJ,CAAiBrE,IAAI,CAACoB,MAAtB,CAAV,CADqB;;AAGrBzB,IAAAA,GAAG,CAACc,MAAJ,GAAaT,IAAI,CAACS,MAAlB,CAHqB;;AAKrB,IAAA,IAAI8D,cAAc,GAAGvE,IAAI,CAACoB,MAAL,GAAc,GAAnC,CAAA;AACAzB,IAAAA,GAAG,CAACwC,QAAJ,GAAe,IAAIX,MAAJ,CAAW+C,cAAX,CAAf,CAAA;IACA5E,GAAG,CAACwC,QAAJ,CAAa1B,MAAb,GAAsBT,IAAI,CAACmC,QAAL,CAAc1B,MAApC,CAAA;AACA,IAAA,OAAOd,GAAP,CAAA;AACH,GAAA;;AA1GqB;;ACAnB,SAASgF,aAAT,CAAuBC,UAAvB,EAAmC;EACtC,IAAIA,UAAU,IAAI,IAAlB,EAAwB;AACpB,IAAA,OAAO,IAAP,CAAA;AACH,GAAA;;AACD,EAAA,OAAOP,YAAY,CAAC7F,WAAb,CAAyBoG,UAAzB,CAAP,CAAA;AACH;;AAGM,SAASC,cAAT,GAA0B;EAC7B9D,MAAM,CAACrC,eAAA,EAAA,CAAuBoG,QAAvB,EAAsC,KAAA,GAAvC,EAA4C,kDAA5C,CAAN,CAAA;AACH;;AAGM,SAASC,oBAAT,CAA8BC,QAA9B,EAAkDC,aAAlD,EAAyEC,OAAzE,EAAgG;AACnG;EACA,IAAIC,kBAAkB,GAAI,CAAA,EAAEF,aAAc,CAAA,EAAEG,SAAU,CAAEF,EAAAA,OAAQ,CAAhE,CAAA,CAFmG;;EAInG,IAAIG,IAAI,GAAGL,QAAQ,CAACM,KAAT,CAAe5F,MAAf,CAAsByF,kBAAtB,CAAX,CAAA;;EACA,IAAIE,IAAI,IAAI,IAAZ,EAAkB;IACd3G,KAAA,CAAW,SAAX,CAAA,CAAA;AACH,GAPkG;;;AAUnG,EAAA,IAAI6G,SAAS,GAAGZ,aAAa,CAACK,QAAQ,CAACO,SAAT,CAAmB/F,GAAnB,CAAuB6F,IAAI,CAACG,QAA5B,CAAD,CAA7B,CAAA;;EACA,IAAID,SAAS,IAAI,IAAjB,EAAuB;IACnB7G,KAAA,CAAW,mBAAX,CAAA,CAAA;AACH,GAbkG;;;AAenG6G,EAAAA,SAAS,CAAC7F,MAAV,CAAiByF,kBAAjB,EAfmG;;AAkBnG,EAAA,IAAII,SAAS,CAAC7D,OAAV,EAAJ,EAAyB;IACrBsD,QAAQ,CAACO,SAAT,CAAmB7F,MAAnB,CAA0B2F,IAAI,CAACG,QAA/B,CAAA,CADqB;AAGxB,GAHD,MAGO;IACHR,QAAQ,CAACO,SAAT,CAAmB5F,GAAnB,CAAuB0F,IAAI,CAACG,QAA5B,EAAsCD,SAAtC,CAAA,CAAA;AACH,GAvBkG;;;AA0BnG,EAAA,IAAIE,eAAe,GAAGd,aAAa,CAACK,QAAQ,CAACS,eAAT,CAAyBjG,GAAzB,CAA6ByF,aAA7B,CAAD,CAAnC,CAAA;;EACA,IAAIQ,eAAe,IAAI,IAAvB,EAA6B;IACzB/G,KAAA,CAAW,0BAAX,CAAA,CAAA;AACH,GA7BkG;;;AAgCnG+G,EAAAA,eAAe,CAAC/F,MAAhB,CAAuBwF,OAAvB,EAhCmG;;AAkCnG,EAAA,IAAIO,eAAe,CAAC/D,OAAhB,EAAJ,EAA+B;AAC3BsD,IAAAA,QAAQ,CAACS,eAAT,CAAyB/F,MAAzB,CAAgCuF,aAAhC,EAD2B;AAG9B,GAHD,MAGO;AACHD,IAAAA,QAAQ,CAACS,eAAT,CAAyB9F,GAAzB,CAA6BsF,aAA7B,EAA4CQ,eAA5C,CAAA,CAAA;AACH,GAvCkG;;;AA0CnG,EAAA,OAAOJ,IAAP,CAAA;AACH;;ACvDD,MAAMK,iBAAiB,GAAG,mBAA1B,CAAA;AACA,MAAMC,oBAAoB,GAAG,kBAA7B;;AAGO,MAAMC,IAAN,CAAW;AACd;AAEA;AAEA;AAEA;AAEA;AAGA3G,EAAAA,WAAW,CACP;IACI4G,OADJ;IAEIC,UAFJ;IAGIb,aAHJ;IAIIC,OAJJ;AAKIa,IAAAA,cAAAA;AALJ,GADO,EAaJ;IACH,IAAKP,CAAAA,QAAL,GAAgBK,OAAhB,CAAA;IACA,IAAKG,CAAAA,WAAL,GAAmBF,UAAnB,CAAA;IACA,IAAKG,CAAAA,eAAL,GAAuBhB,aAAvB,CAAA;IACA,IAAKiB,CAAAA,QAAL,GAAgBhB,OAAhB,CAAA;IACA,IAAKiB,CAAAA,eAAL,GAAuBJ,cAAvB,CAAA;AACH,GAAA;;AA/Ba;;AAmCX,SAASK,kBAAT,CAA4B;EAC/BpB,QAD+B;EAE/BC,aAF+B;AAG/BC,EAAAA,OAAAA;AAH+B,CAA5B,EAQJ;AACC;AACAL,EAAAA,cAAc,GAFf;;EAKC,IAAIQ,IAAI,GAAGN,oBAAoB,CAACC,QAAD,EAAWC,aAAX,EAA0BC,OAA1B,CAA/B,CALD;;AAQC,EAAA,IAAIW,OAAO,GAAGnH,oBAAA,EAAd,CARD;;EAWCqC,MAAM,CAAC8E,OAAO,IAAIR,IAAI,CAACG,QAAjB,EAA2B,0CAA3B,CAAN,CAAA;AACH;;AAGM,SAASa,mBAAT,CAA6B;EAChCrB,QADgC;EAEhCC,aAFgC;EAGhCC,OAHgC;AAIhCoB,EAAAA,KAAAA;AAJgC,CAA7B,EAUJ;AACC;AACAzB,EAAAA,cAAc,GAFf;;EAKC,IAAIM,kBAAkB,GAAI,CAAA,EAAEF,aAAc,CAAA,EAAEG,SAAU,CAAEF,EAAAA,OAAQ,CAAhE,CAAA,CALD;;EAQC,IAAIG,IAAI,GAAGL,QAAQ,CAACM,KAAT,CAAe9F,GAAf,CAAmB2F,kBAAnB,CAAX,CAAA;;EACA,IAAIE,IAAI,IAAI,IAAZ,EAAkB;IACd3G,KAAA,CAAW,SAAX,CAAA,CAAA;AACH,GAAA;;AAEDqC,EAAAA,MAAM,CAACrC,oBAAA,EAA+B2G,IAAAA,IAAI,CAACG,QAArC,EAA+C,0CAA/C,CAAN,CAbD;;AAeCH,EAAAA,IAAI,CAACc,eAAL,GAAuBG,KAAvB,CAfD;;AAiBCtB,EAAAA,QAAQ,CAACM,KAAT,CAAe3F,GAAf,CAAmBwF,kBAAnB,EAAuCE,IAAvC,CAAA,CAAA;AACH;;AAGM,SAASkB,aAAT,CAAuB;EAC1BvB,QAD0B;EAE1BC,aAF0B;AAG1BC,EAAAA,OAAAA;AAH0B,CAAvB,EAQJ;AACC;AACA,EAAA,IAAIsB,OAAO,GAAG9H,eAAA,EAAA,CAAuB+H,OAAvB,EAAd,CAAA;EACA1F,MAAM,CAACyF,OAAO,GAAG,CAAX,EAAc,gCAAd,CAAN,CAHD;;EAMC,IAAIrB,kBAAkB,GAAI,CAAA,EAAEF,aAAc,CAAA,EAAEG,SAAU,CAAEF,EAAAA,OAAQ,CAAhE,CAAA,CAND;;EAQC,IAAIG,IAAI,GAAGL,QAAQ,CAACM,KAAT,CAAe9F,GAAf,CAAmB2F,kBAAnB,CAAX,CAAA;;EACA,IAAIE,IAAI,IAAI,IAAZ,EAAkB;IACd3G,KAAA,CAAW,SAAX,CAAA,CAAA;AACH,GAXF;;;AAcC,EAAA,IAAIgI,OAAO,GAAGhI,oBAAA,EAAd,CAAA;EACAqC,MAAM,CAAC2F,OAAO,IAAIrB,IAAI,CAACG,QAAjB,EAA2B,kCAA3B,CAAN,CAfD;;EAkBC,IAAIc,KAAK,GAAGK,MAAM,CAACtB,IAAI,CAACc,eAAN,CAAlB,CAlBD;;EAoBCpF,MAAM,CAACyF,OAAO,IAAIF,KAAZ,EAAmB,gDAAnB,CAAN,CApBD;;AAuBCM,EAAAA,eAAe,CAAC;IAAC5B,QAAD;IAAWC,aAAX;IAA0BC,OAA1B;AAAmCoB,IAAAA,KAAK,EAAEE,OAAO,CAAC1B,QAAR,EAA1C;AAA8D4B,IAAAA,OAAAA;AAA9D,GAAD,CAAf,CAAA;AACH;AAGD;;AACO,SAASE,eAAT,CAAyB;EAC5B5B,QAD4B;EAE5BC,aAF4B;EAG5BC,OAH4B;EAI5BoB,KAJ4B;AAK5BI,EAAAA,OAAAA;AAL4B,CAAzB,EAYJ;AACC;EACA,IAAIrB,IAAI,GAAGN,oBAAoB,CAACC,QAAD,EAAWC,aAAX,EAA0BC,OAA1B,CAA/B,CAFD;AAKC;;AACA,EAAA,MAAM2B,OAAO,GAAGnI,kBAAA,CAAwBuG,aAAxB,CAAhB,CAAA;AACAvG,EAAAA,8BAAA,CACImI,OADJ,EAEI,qBAFJ,EAGItG,KAAK,CAACnF,IAAI,CAACC,SAAL,CAAe;AACbyL,IAAAA,WAAW,EAAEJ,OADA;AACS;AACtBR,IAAAA,QAAQ,EAAEhB,OAFG;AAEM;IACnBc,WAAW,EAAEX,IAAI,CAACW,WAHL;AAGkB;AAC/Be,IAAAA,IAAI,EAAE,oBAJO;AAIe;;AAC5B;AAChB;AACA;AACA;AACgBC,IAAAA,OAAO,EAAEV,KATI;IAUbW,cAAc,EAAG,EAVJ;;AAAA,GAAf,CAAD,CAHT,EAeI,CAfJ;AAgBItB,EAAAA,oBAhBJ,EAPD;AA2BC;;AACAjH,EAAAA,WAAA,CACImI,OADJ,EAEInI,gBAAA,EAFJ,EAGI,kBAHJ,EAII6B,KAAK,CAACnF,IAAI,CAACC,SAAL,CAAe;AACjB6L,IAAAA,QAAQ,EAAER,OADO;AACE;AACnBJ,IAAAA,KAAK,EAAEA,KAAAA;AAFU,GAAf,CAAD,CAJT,EAQI,CARJ;EASIZ,iBATJ,CAAA,CAAA;AAWA,EAAA,OAAOhH,aAAA,CAAmBmI,OAAnB,CAAP,CAAA;AACH,CAAA;AAED;AACA;AACA;AACA;AACA;;AACO,SAASM,uBAAT,CAAiC;EACpCT,OADoC;AAEpCJ,EAAAA,KAAAA;AAFoC,CAAjC,EAMJ;AACCvF,EAAAA,MAAM,CAACrC,gBAAA,EAA4BA,KAAAA,oBAAA,EAA7B,EAA0D,+CAA1D,CAAN,CADD;;AAIC,EAAA,IAAI0I,MAAM,GAAG1I,aAAA,CAAmB,CAAnB,CAAb,CAAA;EACA,IAAI2I,MAAM,GAAG,IAAb,CAAA;;AACA,EAAA,IAAI,OAAOD,MAAP,KAAkB,QAAtB,EAAgC;AAC5B;IAEA,IAAI;AACA,MAAA,IAAIE,YAAY,GAAGlM,IAAI,CAACwD,KAAL,CAAWwI,MAAX,CAAnB,CAAA;;MACA,IAAI3M,MAAM,CAACyI,IAAP,CAAYoE,YAAY,CAACD,MAAzB,CAAiC5G,CAAAA,MAAjC,GAA0C,EAA1C,IAAgDhG,MAAM,CAACyI,IAAP,CAAYoE,YAAY,CAACD,MAAzB,CAAiC5G,CAAAA,MAAjC,GAA0C,CAA9F,EAAiG;AAC7F;QACA,MAAM,oCAAN,CAF6F;AAIhG,OAJD,MAIO;AACH;AACA,QAAA,IAAI8G,SAAS,GAAGZ,MAAM,CAACL,KAAD,CAAtB,CAFG;;AAIH7L,QAAAA,MAAM,CAAC+M,OAAP,CAAeF,YAAY,CAACD,MAA5B,CAAoCI,CAAAA,OAApC,CAA4C,CAAC,CAAC3N,GAAD,EAAMmE,KAAN,CAAD,EAAeoD,KAAf,KAAyB;AACjEkG,UAAAA,SAAS,GAAGA,SAAS,GAAGZ,MAAM,CAAC1I,KAAD,CAA9B,CAAA;AACH,SAFD,EAJG;AASH;AACA;;AACA,QAAA,IAAIsJ,SAAS,IAAIZ,MAAM,CAAC,CAAD,CAAnB,IAA0BY,SAAS,IAAIZ,MAAM,CAAC,CAAD,CAAjD,EAAsD;AAClD;UACAU,MAAM,GAAGC,YAAY,CAACD,MAAtB,CAAA;AACH,SAHD,MAGO;AACH;AACA,UAAA,MAAM,uBAAN,CAAA;AACH,SAAA;AACJ,OAAA;KAxBL,CAyBE,OAAOlH,CAAP,EAAU;AACRzB,MAAAA,GAAA,CAAU,CAAA,4BAAA,EAA8B0I,MAAO,CAA/C,CAAA,CAAA,CAAA;AACAC,MAAAA,MAAM,GAAG,IAAT,CAAA;AACH,KAAA;AACJ,GAtCF;;;EAyCC,IAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,IAAA,MAAMR,OAAO,GAAGnI,kBAAA,CAAwBgI,OAAxB,CAAhB,CAAA;IACAhI,0BAAA,CAAgCmI,OAAhC,EAAyCF,MAAM,CAACL,KAAD,CAA/C,CAAA,CAAA;AACA,IAAA,OAAOA,KAAP,CAAA;AACH,GA7CF;;;AA+CC,EAAA,KAAK,IAAI,CAACxM,GAAD,EAAMmE,KAAN,CAAT,IAAyBxD,MAAM,CAAC+M,OAAP,CAAeH,MAAf,CAAzB,EAAiD;AAC7C,IAAA,MAAMR,OAAO,GAAGnI,kBAAA,CAAwB5E,GAAxB,CAAhB,CAAA;IACA4E,0BAAA,CAAgCmI,OAAhC,EAAyCF,MAAM,CAAC1I,KAAD,CAA/C,CAAA,CAAA;AACH,GAlDF;;;AAqDC,EAAA,OAAOqI,KAAP,CAAA;AACH;;ACzPD;AACO,SAASoB,mBAAT,CAA6B;AAChC1C,EAAAA,QAAAA;AADgC,CAA7B,EAII;AACP;AACA,EAAA,OAAOA,QAAQ,CAACM,KAAT,CAAe7D,GAAf,EAAA,CAAqBqD,QAArB,EAAP,CAAA;AACH;;AAGM,SAAS6C,uBAAT,CAAiC;EACpC3C,QADoC;AAEpCtI,EAAAA,SAAAA;AAFoC,CAAjC,EAMI;AACP;AACA,EAAA,IAAI6I,SAAS,GAAGZ,aAAa,CAACK,QAAQ,CAACO,SAAT,CAAmB/F,GAAnB,CAAuB9C,SAAvB,CAAD,CAA7B,CAFO;;EAIP,IAAI6I,SAAS,IAAI,IAAjB,EAAuB;AACnB,IAAA,OAAO,GAAP,CAAA;AACH,GAAA;;AAED,EAAA,OAAOA,SAAS,CAAC9D,GAAV,EAAA,CAAgBqD,QAAhB,EAAP,CAAA;AACH;;AAGM,SAAS8C,sBAAT,CAAgC;EACnC5C,QADmC;EAEnCtI,SAFmC;EAGnCmL,SAHmC;AAInCC,EAAAA,KAAAA;AAJmC,CAAhC,EAUI;AACP;AACA,EAAA,IAAIC,QAAQ,GAAGpD,aAAa,CAACK,QAAQ,CAACO,SAAT,CAAmB/F,GAAnB,CAAuB9C,SAAvB,CAAD,CAA5B,CAFO;;EAKP,IAAIqL,QAAQ,IAAI,IAAhB,EAAsB;AAClB,IAAA,OAAO,EAAP,CAAA;AACH,GAPM;;;EAUP,IAAIC,KAAK,GAAGH,SAAS,GAAGI,QAAQ,CAACJ,SAAD,CAAX,GAAyB,CAA9C,CAVO;;AAYP,EAAA,IAAIK,GAAG,GAAGJ,KAAK,GAAGA,KAAH,GAAW,EAA1B,CAAA;AAEA,EAAA,IAAI5E,IAAI,GAAG6E,QAAQ,CAACvF,OAAT,EAAX,CAAA;EACA,IAAI8C,KAAa,GAAG,EAApB,CAAA;;EACA,KAAI,IAAI5E,CAAC,GAAGsH,KAAZ,EAAmBtH,CAAC,GAAGwH,GAAvB,EAA4BxH,CAAC,EAA7B,EAAiC;AAC7B,IAAA,IAAGA,CAAC,IAAIwC,IAAI,CAACzC,MAAb,EAAqB;AACjB,MAAA,MAAA;AACH,KAAA;;AACD,IAAA,IAAI4E,IAAI,GAAGL,QAAQ,CAACM,KAAT,CAAe9F,GAAf,CAAmB0D,IAAI,CAACxC,CAAD,CAAvB,CAAX,CAAA;;IACA,IAAI2E,IAAI,IAAI,IAAZ,EAAkB;MACdC,KAAK,CAACxD,IAAN,CAAWuD,IAAX,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;AACD,EAAA,OAAOC,KAAP,CAAA;AACH;;AAGM,SAAS6C,6BAAT,CAAuC;EAC1CnD,QAD0C;AAE1CC,EAAAA,aAAAA;AAF0C,CAAvC,EAMI;AACP;AACA,EAAA,IAAIQ,eAAe,GAAGd,aAAa,CAACK,QAAQ,CAACS,eAAT,CAAyBjG,GAAzB,CAA6ByF,aAA7B,CAAD,CAAnC,CAFO;;EAIP,IAAIQ,eAAe,IAAI,IAAvB,EAA6B;AACzB,IAAA,OAAO,GAAP,CAAA;AACH,GAAA;;AAED,EAAA,OAAOA,eAAe,CAAChE,GAAhB,EAAA,CAAsBqD,QAAtB,EAAP,CAAA;AACH;;AAGM,SAASsD,4BAAT,CAAsC;EACzCpD,QADyC;EAEzCtI,SAFyC;EAGzCmL,SAHyC;AAIzCC,EAAAA,KAAAA;AAJyC,CAAtC,EAUI;AACP;AACA,EAAA,IAAIC,QAAQ,GAAGpD,aAAa,CAACK,QAAQ,CAACS,eAAT,CAAyBjG,GAAzB,CAA6B9C,SAA7B,CAAD,CAA5B,CAFO;;EAKP,IAAIqL,QAAQ,IAAI,IAAhB,EAAsB;AAClB,IAAA,OAAO,EAAP,CAAA;AACH,GAPM;;;EAUP,IAAIC,KAAK,GAAGH,SAAS,GAAGI,QAAQ,CAACJ,SAAD,CAAX,GAAyB,CAA9C,CAVO;;AAYP,EAAA,IAAIK,GAAG,GAAGJ,KAAK,GAAGA,KAAH,GAAW,EAA1B,CAAA;AAEA,EAAA,IAAI5E,IAAI,GAAG6E,QAAQ,CAACvF,OAAT,EAAX,CAAA;EACA,IAAI8C,KAAa,GAAG,EAApB,CAAA;;EACA,KAAI,IAAI5E,CAAC,GAAGsH,KAAZ,EAAmBtH,CAAC,GAAGwH,GAAvB,EAA4BxH,CAAC,EAA7B,EAAiC;AAC7B,IAAA,IAAGA,CAAC,IAAIwC,IAAI,CAACzC,MAAb,EAAqB;AACjB,MAAA,MAAA;AACH,KAAA;;AACD,IAAA,IAAI4E,IAAI,GAAGL,QAAQ,CAACM,KAAT,CAAe9F,GAAf,CAAmB0D,IAAI,CAACxC,CAAD,CAAvB,CAAX,CAAA;;IACA,IAAI2E,IAAI,IAAI,IAAZ,EAAkB;MACdC,KAAK,CAACxD,IAAN,CAAWuD,IAAX,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;AACD,EAAA,OAAOC,KAAP,CAAA;AACH;;AAGM,SAAS+C,eAAT,CAAyB;EAC5BrD,QAD4B;AAE5BsD,EAAAA,gBAAAA;AAF4B,CAAzB,EAME;AACL;AACA;AACA,EAAA,OAAOtD,QAAQ,CAACM,KAAT,CAAe9F,GAAf,CAAmB8I,gBAAnB,CAAP,CAAA;AACH;;ACrIM,SAASC,oBAAT,CAA8B;EACjCvD,QADiC;EAEjCE,OAFiC;EAGjCW,OAHiC;EAIjCC,UAJiC;AAKjC/J,EAAAA,GAAAA;AALiC,CAA9B,EAYJ;AACC;AACA,EAAA,IAAIyM,UAAU,GAAG9J,oBAAA,EAAjB,CAFD;;AAIC,EAAA,IAAI+J,QAAQ,GAAG/J,eAAA,EAAf,CAJD;AAOC;;EACAqC,MAAM,CAAC0H,QAAQ,IAAID,UAAb,EAAyB,4DAAzB,CAAN,CARD;;EAUCzH,MAAM,CAAC8E,OAAO,IAAI4C,QAAZ,EAAsB,4CAAtB,CAAN,CAVD;;AAaC,EAAA,IAAIC,aAAa,GAAG1D,QAAQ,CAAC2D,uBAAT,EAApB,CAbD;;AAeC,EAAA,IAAIC,gBAAgB,GAAG5D,QAAQ,CAAC6D,eAAT,CAAyBrJ,GAAzB,CAA6BiJ,QAA7B,KAA0C9B,MAAM,CAAC,CAAD,CAAvE,CAfD;;AAiBC,EAAA,IAAImC,qBAAqB,GAAG,CAACnC,MAAM,CAACgB,uBAAuB,CAAC;IAAC3C,QAAD;AAAWtI,IAAAA,SAAS,EAAE+L,QAAAA;AAAtB,GAAD,CAAxB,CAAN,GAAmE9B,MAAM,CAAC,CAAD,CAA1E,IAAiFA,MAAM,CAAC+B,aAAD,CAAnH,CAjBD;;EAoBC3H,MAAM,CAAC6H,gBAAgB,IAAIE,qBAArB,EAA4C,8DAA5C,CAAN,CApBD;;AAuBC,EAAA,IAAI/C,cAAc,GAAG3K,IAAI,CAACwD,KAAL,CAAW7C,GAAX,CAArB,CAAA;;AACA,EAAA,IAAI,CAACgK,cAAc,CAACgD,cAAf,CAA8B,iBAA9B,CAAD,IAAqDtO,MAAM,CAACyI,IAAP,CAAY6C,cAAZ,EAA4BtF,MAA5B,IAAsC,CAA/F,EAAkG;IAC9F/B,KAAA,CAAW,yBAAX,CAAA,CAAA;AACH,GA1BF;;;EA4BC,IAAIyG,kBAAkB,GAAI,CAAA,EAAEqD,UAAW,CAAA,EAAEpD,SAAU,CAAEF,EAAAA,OAAQ,CAA7D,CAAA,CA5BD;;EA+BCF,QAAQ,CAACM,KAAT,CAAe3F,GAAf,CAAmBwF,kBAAnB,EAAuC,IAAIS,IAAJ,CAAS;AAC5CC,IAAAA,OAAO,EAAEA,OADmC;AAC1B;AAClBC,IAAAA,UAAU,EAAEA,UAFgC;AAEpB;AACxBb,IAAAA,aAAa,EAAEuD,UAH6B;AAGjB;AAC3BtD,IAAAA,OAAO,EAAEA,OAJmC;AAI1B;AAClBa,IAAAA,cAAc,EAAEA,cAAc,CAACI,eALa;;GAAT,CAAvC,EA/BD;AAwCC;;AACA,EAAA,IAAIZ,SAAS,GAAGP,QAAQ,CAACO,SAAT,CAAmB/F,GAAnB,CAAuBqG,OAAvB,CAAA,IAAmD,IAAIxB,YAAJ,CAAiBwB,OAAjB,CAAnE,CAzCD;;AA2CCN,EAAAA,SAAS,CAAC5F,GAAV,CAAcwF,kBAAd,EA3CD;;EA6CCH,QAAQ,CAACO,SAAT,CAAmB5F,GAAnB,CAAuBkG,OAAvB,EAAgCN,SAAhC,CAAA,CA7CD;;AAgDC,EAAA,IAAIE,eAAe,GAAGT,QAAQ,CAACS,eAAT,CAAyBjG,GAAzB,CAA6BgJ,UAA7B,CAAA,IAA4D,IAAInE,YAAJ,CAAiBmE,UAAjB,CAAlF,CAhDD;;AAkDC/C,EAAAA,eAAe,CAAC9F,GAAhB,CAAoBuF,OAApB,EAlDD;;AAoDCF,EAAAA,QAAQ,CAACS,eAAT,CAAyB9F,GAAzB,CAA6B6I,UAA7B,EAAyC/C,eAAzC,CAAA,CAAA;AAEH;;;;ACjEYuD,MAAAA,iBAAiB,GAAG;;AAGpBC,MAAAA,iBAAiB,GAAG;;AAGpBC,MAAAA,gBAAwB,GAAGvC,MAAM,CAAC,IAAD,CAAN,GAAejI,eAAA,EAAA,CAAuB+H,OAAvB;;AAGhD,MAAMrB,SAAS,GAAG,IAAlB;AAGM+D,IAAAA,QAAb,GADClP,WACD,CAAA,MAAA,IAAA,OAAA,GADA,MACakP,QADb,SAC8B5K,YAD9B,CAC2C;AACvC;;AAGA;AACJ;AACA;AACA;AACA;AAGI;AAGA;AAGA;;AAGA;AACJ;AACA;AACA;AACA;AACIU,EAAAA,WAAW,CAAC;AAAEuG,IAAAA,QAAAA;AAAF,GAAD,EAAqC;AAC5C,IAAA,KAAA,EAAA,CAAA;IACA,IAAKK,CAAAA,OAAL,GAAeL,QAAf,CAAA;AACA,IAAA,IAAA,CAAKF,KAAL,GAAa,IAAIxC,YAAJ,CAAiB,OAAjB,CAAb,CAAA;AACA,IAAA,IAAA,CAAKyC,SAAL,GAAiB,IAAInG,SAAJ,CAAc,WAAd,CAAjB,CAAA;AACA,IAAA,IAAA,CAAKqG,eAAL,GAAuB,IAAIrG,SAAJ,CAAc,iBAAd,CAAvB,CAAA;AACA,IAAA,IAAA,CAAKyJ,eAAL,GAAuB,IAAIzJ,SAAJ,CAAc,iBAAd,CAAvB,CAAA;AACH,GAAA;;AAEDN,EAAAA,OAAO,GAAG;IACN,OAAO,IAAIqK,QAAJ,CAAa;AAAC3D,MAAAA,QAAQ,EAAE,EAAA;AAAX,KAAb,CAAP,CAAA;AACH,GAAA;AAED;AACJ;AACA;;;AAEI;AACA;AACA4D,EAAAA,eAAe,CAAC;AAAEC,IAAAA,UAAAA;AAAF,GAAD,EAA0C;AACrD;IACA,IAAIC,gBAAgB,GAAGD,UAAU,IAAI3K,oBAAA,EAArC,CAFqD;;IAKrD,IAAI8H,OAAO,GAAG9H,eAAA,EAAuB+H,CAAAA,OAAvB,EAAd,CALqD;;IAQrD1F,MAAM,CAACyF,OAAO,IAAI0C,gBAAZ,EAA+B,+BAA8BA,gBAAiB,CAAA,CAA9E,CAAN,CARqD;;IAWrD,IAAIlC,OAAe,GAAG,IAAA,CAAK6B,eAAL,CAAqBrJ,GAArB,CAAyB8J,gBAAzB,CAAA,IAAwD,GAA9E,CAXqD;;IAarD,IAAIC,UAAU,GAAG5C,MAAM,CAACK,OAAD,CAAN,GAAkBR,OAAnC,CAbqD;;IAerD,IAAKqC,CAAAA,eAAL,CAAqBlJ,GAArB,CAAyB2J,gBAAzB,EAA2CC,UAAU,CAACzE,QAAX,EAA3C,CAAA,CAAA;AACH,GAAA;;AAGD;AACA;AACA;AACA0E,EAAAA,gBAAgB,GAAG;AACf;AACA;AACA3E,IAAAA,cAAc,GAHC;;AAMf,IAAA,IAAIgB,OAAO,GAAGnH,oBAAA,EAAd,CANe;;IAQf,IAAI9B,MAAc,GAAG,IAAA,CAAKiM,eAAL,CAAqBnJ,MAArB,CAA4BmG,OAA5B,CAAA,IAAkD,GAAvE,CARe;;AAWf,IAAA,IAAIP,KAAK,GAAGX,aAAa,CAAC,IAAKY,CAAAA,SAAL,CAAe/F,GAAf,CAAmBqG,OAAnB,CAAD,CAAzB,CAXe;;IAaf,IAAIpE,GAAG,GAAG,CAAV,CAAA;;IACA,IAAI6D,KAAK,IAAI,IAAb,EAAmB;AACf7D,MAAAA,GAAG,GAAG6D,KAAK,CAAC7D,GAAN,EAAN,CAAA;AACH,KAhBc;;;IAmBf,IAAIgI,IAAI,GAAG9C,MAAM,CAAClF,GAAD,CAAN,GAAcyH,gBAAzB,CAnBe;;IAqBf,IAAIQ,UAAU,GAAG/C,MAAM,CAAC/J,MAAD,CAAN,GAAiB6M,IAAlC,CArBe;;IAwBf,IAAIC,UAAU,GAAG,CAAjB,EAAoB;AAChB,MAAA,MAAM7C,OAAO,GAAGnI,kBAAA,CAAwBmH,OAAxB,CAAhB,CAAA;AACAnH,MAAAA,0BAAA,CAAgCmI,OAAhC,EAAyC6C,UAAzC,CAAA,CAAA;AACH,KA3Bc;AA8Bf;AACA;;;IACA,IAAID,IAAI,GAAG,CAAX,EAAc;MACV,IAAKZ,CAAAA,eAAL,CAAqBlJ,GAArB,CAAyBkG,OAAzB,EAAkC4D,IAAI,CAAC3E,QAAL,EAAlC,CAAA,CAAA;AACH,KAAA;AACJ,GAAA;;AAGD;AACA6D,EAAAA,uBAAuB,GAAW;IAC9B,OAAOO,gBAAgB,CAACpE,QAAjB,EAAP,CAAA;AACH,GAAA;;AAGD;AACA6E,EAAAA,kBAAkB,CAAC;AAAEN,IAAAA,UAAAA;AAAF,GAAD,EAAgD;AAC9D,IAAA,OAAO,KAAKR,eAAL,CAAqBrJ,GAArB,CAAyB6J,UAAzB,KAAkD,GAAzD,CAAA;AACH,GAAA;AAED;AACJ;AACA;;;AAEI;AACAO,EAAAA,WAAW,CAAC;IAAC3D,eAAD;AAAkBC,IAAAA,QAAAA;AAAlB,GAAD,EAA0E;AACjF,IAAA,OAAOE,kBAAkB,CAAC;AAACpB,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,aAAa,EAAEgB,eAAhC;AAAiDf,MAAAA,OAAO,EAAEgB,QAAAA;AAA1D,KAAD,CAAzB,CAAA;AACH,GAAA;;AAGD;AACA2D,EAAAA,YAAY,CAAC;IAAC5D,eAAD;IAAkBC,QAAlB;AAA4BI,IAAAA,KAAAA;AAA5B,GAAD,EAAgG;AACxG,IAAA,OAAOD,mBAAmB,CAAC;AAACrB,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,aAAa,EAAEgB,eAAhC;AAAiDf,MAAAA,OAAO,EAAEgB,QAA1D;AAAoEI,MAAAA,KAAK,EAAEA,KAAAA;AAA3E,KAAD,CAA1B,CAAA;AACH,GAAA;;AAGD;AACAwD,EAAAA,KAAK,CAAC;IAAC7D,eAAD;AAAkBC,IAAAA,QAAAA;AAAlB,GAAD,EAA0E;AAC3E,IAAA,OAAOK,aAAa,CAAC;AAACvB,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,aAAa,EAAEgB,eAAhC;AAAiDf,MAAAA,OAAO,EAAEgB,QAAAA;AAA1D,KAAD,CAApB,CAAA;AACH,GAAA;;AAGD;AACA6D,EAAAA,gBAAgB,CAAC;IAAC7C,QAAD;AAAWZ,IAAAA,KAAAA;AAAX,GAAD,EAAsD;AAClE,IAAA,OAAOa,uBAAuB,CAAC;AAACT,MAAAA,OAAO,EAAEQ,QAAV;AAAoBZ,MAAAA,KAAK,EAAEA,KAAAA;AAA3B,KAAD,CAA9B,CAAA;AACH,GAAA;AAED;AACJ;AACA;;;AAEI;AACA0D,EAAAA,gBAAgB,GAAW;AACvB,IAAA,OAAOtC,mBAAmB,CAAC;AAAC1C,MAAAA,QAAQ,EAAE,IAAA;AAAX,KAAD,CAA1B,CAAA;AACH,GAAA;;AAGD;AACAiF,EAAAA,sBAAsB,CAAC;AAACZ,IAAAA,UAAAA;AAAD,GAAD,EAA4C;AAC9D,IAAA,OAAO1B,uBAAuB,CAAC;AAAC3C,MAAAA,QAAQ,EAAE,IAAX;AAAiBtI,MAAAA,SAAS,EAAE2M,UAAAA;AAA5B,KAAD,CAA9B,CAAA;AACH,GAAA;;AAGD;AACAa,EAAAA,qBAAqB,CAAC;IAACb,UAAD;IAAac,UAAb;AAAyBrC,IAAAA,KAAAA;AAAzB,GAAD,EAAoG;AACrH,IAAA,OAAOF,sBAAsB,CAAC;AAAC5C,MAAAA,QAAQ,EAAE,IAAX;AAAiBtI,MAAAA,SAAS,EAAE2M,UAA5B;AAAwCxB,MAAAA,SAAS,EAAEsC,UAAnD;AAA+DrC,MAAAA,KAAK,EAAEA,KAAAA;AAAtE,KAAD,CAA7B,CAAA;AACH,GAAA;;AAGD;AACAsC,EAAAA,6BAA6B,CAAC;AAACnE,IAAAA,eAAAA;AAAD,GAAD,EAAsD;AAC/E,IAAA,OAAOkC,6BAA6B,CAAC;AAACnD,MAAAA,QAAQ,EAAE,IAAX;AAAiBC,MAAAA,aAAa,EAAEgB,eAAAA;AAAhC,KAAD,CAApC,CAAA;AACH,GAAA;;AAGD;AACAoE,EAAAA,4BAA4B,CAAC;IAACpE,eAAD;IAAkBkE,UAAlB;AAA8BrC,IAAAA,KAAAA;AAA9B,GAAD,EAA8G;AACtI,IAAA,OAAOM,4BAA4B,CAAC;AAACpD,MAAAA,QAAQ,EAAE,IAAX;AAAiBtI,MAAAA,SAAS,EAAEuJ,eAA5B;AAA6C4B,MAAAA,SAAS,EAAEsC,UAAxD;AAAoErC,MAAAA,KAAK,EAAEA,KAAAA;AAA3E,KAAD,CAAnC,CAAA;AACH,GAAA;;AAGD;AACAwC,EAAAA,QAAQ,CAAC;AAACC,IAAAA,kBAAAA;AAAD,GAAD,EAA0D;AAC9D,IAAA,OAAOlC,eAAe,CAAC;AAACrD,MAAAA,QAAQ,EAAE,IAAX;AAAiBsD,MAAAA,gBAAgB,EAAEiC,kBAAAA;AAAnC,KAAD,CAAtB,CAAA;AACH,GAAA;AAED;AACJ;AACA;;;AAEQ;AACAC,EAAAA,cAAc,CAAC;IAACtE,QAAD;IAAWV,QAAX;IAAqBQ,WAArB;AAAkCjK,IAAAA,GAAAA;AAAlC,GAAD,EAAgH;AAC9H,IAAA,OAAOwM,oBAAoB,CAAC;AAACvD,MAAAA,QAAQ,EAAE,IAAX;AAAiBE,MAAAA,OAAO,EAAEgB,QAA1B;AAAoCL,MAAAA,OAAO,EAAEL,QAA7C;AAAuDM,MAAAA,UAAU,EAAEE,WAAnE;AAAgFjK,MAAAA,GAAG,EAAEA,GAAAA;AAArF,KAAD,CAA3B,CAAA;AACH,GAAA;;AA5LsC,CAA3C,GAyCKnC,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,iBAAAA,EAAAA,CAAAA,IAzCL,CA8DKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,iBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,kBAAAA,EAAAA,CAAAA,IA9DL,CAuGKI,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,kBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,yBAAAA,EAAAA,CAAAA,IAvGL,CA6GKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,yBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,oBAAAA,EAAAA,CAAAA,IA7GL,CAsHKJ,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,oBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,aAAAA,EAAAA,CAAAA,IAtHL,CA4HKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,aAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,cAAAA,EAAAA,CAAAA,IA5HL,CAkIKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,cAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,OAAAA,EAAAA,CAAAA,IAlIL,CAwIKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,OAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,kBAAAA,EAAAA,CAAAA,IAxIL,CAiJKI,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,kBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,kBAAAA,EAAAA,CAAAA,IAjJL,CAuJKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,kBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,wBAAAA,EAAAA,CAAAA,IAvJL,CA6JKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,wBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,uBAAAA,EAAAA,CAAAA,IA7JL,CAmKKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,uBAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,+BAAAA,EAAAA,CAAAA,IAnKL,CAyKKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,+BAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,8BAAAA,EAAAA,CAAAA,IAzKL,CA+KKA,EAAAA,MAAAA,CAAAA,wBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,8BAAAA,CAAAA,EAAAA,OAAAA,CAAAA,SAAAA,CAAAA,EAAAA,yBAAAA,CAAAA,OAAAA,CAAAA,SAAAA,EAAAA,UAAAA,EAAAA,CAAAA,IA/KL,uJAwLKJ,IAxLL,CAAA,EAAA,MAAA,CAAA,wBAAA,CAAA,OAAA,CAAA,SAAA,EAAA,gBAAA,CAAA,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,OAAA,CAAA,CAAA,IAAA,OAAA;;EAAauP;;;kBAAAA;;;;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;;;;kBAAAA;;;;;;;;;;;;;kBAAAA;;;;;;;;;;;;;kBAAAA;;;;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;kBAAAA;;;;;;;;;;;;;kBAAAA;;;;;;;;;;;;;;;"}