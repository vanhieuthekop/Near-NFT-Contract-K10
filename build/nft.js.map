{"version":3,"file":"nft.js","sources":["../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-contract.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/collections/unordered-set.js","../src/nft-contract/metadata.ts","../src/nft-contract/internal.ts","../src/nft-contract/mint.ts","../src/nft-contract/nft_core.ts","../src/nft-contract/enumeration.ts","../src/nft-contract/index.ts"],"sourcesContent":["export function call(target, key, descriptor) {\n}\nexport function view(target, key, descriptor) {\n}\nexport function NearBindgen(target) {\n    return class extends target {\n        static _init() {\n            // @ts-ignore\n            let args = target.deserializeArgs();\n            let ret = new target(args);\n            // @ts-ignore\n            ret.init();\n            // @ts-ignore\n            ret.serialize();\n            return ret;\n        }\n        static _get() {\n            let ret = Object.create(target.prototype);\n            return ret;\n        }\n    };\n}\n","const U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\nexport function log(...params) {\n    env.log(`${params\n        .map(x => x === undefined ? 'undefined' : x) // Stringify undefined\n        .map(x => typeof (x) === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings\n        .join(' ')}` // Convert to string\n    );\n}\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\nexport function blockIndex() {\n    return env.block_index();\n}\nexport function blockHeight() {\n    return blockIndex();\n}\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\nexport function epochHeight() {\n    return env.epoch_height();\n}\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\nexport function usedGas() {\n    return env.used_gas();\n}\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    let ret = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (ret === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\nexport function panic(msg) {\n    if (msg !== undefined) {\n        env.panic(msg);\n    }\n    else {\n        env.panic();\n    }\n}\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function storageRead(key) {\n    let ret = env.storage_read(key, 0);\n    if (ret === 1n) {\n        return env.read_register(0);\n    }\n    else {\n        return null;\n    }\n}\nexport function storageHasKey(key) {\n    let ret = env.storage_has_key(key);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    let ret = env.alt_bn128_pairing_check(value);\n    if (ret === 1n) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function jsvmAccountId() {\n    env.jsvm_account_id(0);\n    return env.read_register(0);\n}\nexport function jsvmJsContractName() {\n    env.jsvm_js_contract_name(0);\n    return env.read_register(0);\n}\nexport function jsvmMethodName() {\n    env.jsvm_method_name(0);\n    return env.read_register(0);\n}\nexport function jsvmArgs() {\n    env.jsvm_args(0);\n    return env.read_register(0);\n}\nexport function jsvmStorageWrite(key, value) {\n    let exist = env.jsvm_storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageRead(key) {\n    let exist = env.jsvm_storage_read(key, 0);\n    if (exist === 1n) {\n        return env.read_register(0);\n    }\n    return null;\n}\nexport function jsvmStorageRemove(key) {\n    let exist = env.jsvm_storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmStorageHasKey(key) {\n    let exist = env.jsvm_storage_has_key(key);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function jsvmCallRaw(contractName, method, args) {\n    env.jsvm_call(contractName, method, JSON.stringify(args), 0);\n    return env.read_register(0);\n}\nexport function jsvmCall(contractName, method, args) {\n    let ret = jsvmCallRaw(contractName, method, args);\n    if (ret === null) {\n        return ret;\n    }\n    return JSON.parse(ret);\n}\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\nexport function jsvmValueReturn(value) {\n    env.jsvm_value_return(value);\n}\n// Standalone only APIs\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\nexport function storageUsage() {\n    return env.storage_usage();\n}\nexport function accountBalance() {\n    return env.account_balance();\n}\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\nexport function valueReturn(value) {\n    env.value_return(value);\n}\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\nexport function promiseAnd(...promiseIndex) {\n    return env.promise_and(...promiseIndex);\n}\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\nexport function promiseResult(resultIdx) {\n    let status = env.promise_result(resultIdx, 0);\n    if (status == PromiseResult.Successful) {\n        return env.read_register(0);\n    }\n    else if (status == PromiseResult.Failed ||\n        status == PromiseResult.NotReady) {\n        return status;\n    }\n    else {\n        panic(`Unexpected return code: ${status}`);\n    }\n}\nexport function promiseReturn(promiseIdx) {\n    env.promise_return(promiseIdx);\n}\nexport function storageWrite(key, value) {\n    let exist = env.storage_write(key, value, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageRemove(key) {\n    let exist = env.storage_remove(key, EVICTED_REGISTER);\n    if (exist === 1n) {\n        return true;\n    }\n    return false;\n}\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n","import * as near from \"./api\";\nexport class NearContract {\n    deserialize() {\n        const rawState = near.storageRead(\"STATE\");\n        if (rawState) {\n            const state = JSON.parse(rawState);\n            // reconstruction of the contract class object from plain object\n            let c = this.default();\n            Object.assign(this, state);\n            for (const item in c) {\n                if (c[item].constructor?.deserialize !== undefined) {\n                    this[item] = c[item].constructor.deserialize(this[item]);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Contract state is empty\");\n        }\n    }\n    serialize() {\n        near.storageWrite(\"STATE\", JSON.stringify(this));\n    }\n    static deserializeArgs() {\n        let args = near.input();\n        return JSON.parse(args || \"{}\");\n    }\n    static serializeReturn(ret) {\n        return JSON.stringify(ret);\n    }\n    init() { }\n}\n","import * as near from '../api';\nexport class LookupMap {\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    containsKey(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        return near.storageHasKey(storageKey);\n    }\n    get(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let raw = near.storageRead(storageKey);\n        if (raw !== null) {\n            return JSON.parse(raw);\n        }\n        return null;\n    }\n    remove(key) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        if (near.storageRemove(storageKey)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    set(key, value) {\n        let storageKey = this.keyPrefix + JSON.stringify(key);\n        let storageValue = JSON.stringify(value);\n        if (near.storageWrite(storageKey, storageValue)) {\n            return JSON.parse(near.storageGetEvicted());\n        }\n        return null;\n    }\n    extend(objects) {\n        for (let kv of objects) {\n            this.set(kv[0], kv[1]);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","export function u8ArrayToBytes(array) {\n    let ret = \"\";\n    for (let e of array) {\n        ret += String.fromCharCode(e);\n    }\n    return ret;\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    let ret = new Uint8Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        ret[i] = bytes.charCodeAt(i);\n    }\n    return ret;\n}\nexport function bytes(strOrU8Array) {\n    if (typeof strOrU8Array == \"string\") {\n        return checkStringIsBytes(strOrU8Array);\n    }\n    else if (strOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(strOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(str) {\n    for (let i = 0; i < str.length; i++) {\n        if (str.charCodeAt(i) > 255) {\n            throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);\n        }\n    }\n    return str;\n}\nexport function assert(b, str) {\n    if (b) {\n        return;\n    }\n    else {\n        throw Error(\"assertion failed: \" + str);\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes } from \"../utils\";\nconst ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nfunction indexToKey(prefix, index) {\n    let data = new Uint32Array([index]);\n    let array = new Uint8Array(data.buffer);\n    let key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/// An iterable implementation of vector that stores its content on the trie.\n/// Uses the following map: index -> element\nexport class Vector {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n    }\n    len() {\n        return this.length;\n    }\n    isEmpty() {\n        return this.length == 0;\n    }\n    get(index) {\n        if (index >= this.length) {\n            return null;\n        }\n        let storageKey = indexToKey(this.prefix, index);\n        return JSON.parse(near.storageRead(storageKey));\n    }\n    /// Removes an element from the vector and returns it in serialized form.\n    /// The removed element is replaced by the last element of the vector.\n    /// Does not preserve ordering, but is `O(1)`.\n    swapRemove(index) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else if (index + 1 == this.length) {\n            return this.pop();\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            let last = this.pop();\n            if (near.storageWrite(key, JSON.stringify(last))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    push(element) {\n        let key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, JSON.stringify(element));\n    }\n    pop() {\n        if (this.isEmpty()) {\n            return null;\n        }\n        else {\n            let lastIndex = this.length - 1;\n            let lastKey = indexToKey(this.prefix, lastIndex);\n            this.length -= 1;\n            if (near.storageRemove(lastKey)) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    replace(index, element) {\n        if (index >= this.length) {\n            throw new Error(ERR_INDEX_OUT_OF_BOUNDS);\n        }\n        else {\n            let key = indexToKey(this.prefix, index);\n            if (near.storageWrite(key, JSON.stringify(element))) {\n                return JSON.parse(near.storageGetEvicted());\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    clear() {\n        for (let i = 0; i < this.length; i++) {\n            let key = indexToKey(this.prefix, i);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let vector = new Vector(data.prefix);\n        vector.length = data.length;\n        return vector;\n    }\n}\nexport class VectorIterator {\n    constructor(vector) {\n        this.current = 0;\n        this.vector = vector;\n    }\n    next() {\n        if (this.current < this.vector.len()) {\n            let value = this.vector.get(this.current);\n            this.current += 1;\n            return { value, done: false };\n        }\n        return { value: null, done: true };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedMap {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.keyIndexPrefix = prefix + \"i\";\n        let indexKey = prefix + \"k\";\n        let indexValue = prefix + \"v\";\n        this.keys = new Vector(indexKey);\n        this.values = new Vector(indexValue);\n    }\n    len() {\n        let keysLen = this.keys.len();\n        let valuesLen = this.values.len();\n        if (keysLen != valuesLen) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysLen;\n    }\n    isEmpty() {\n        let keysIsEmpty = this.keys.isEmpty();\n        let valuesIsEmpty = this.values.isEmpty();\n        if (keysIsEmpty != valuesIsEmpty) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return keysIsEmpty;\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    getIndexRaw(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        return indexRaw;\n    }\n    get(key) {\n        let indexRaw = this.getIndexRaw(key);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            let value = this.values.get(index);\n            if (value) {\n                return value;\n            }\n            else {\n                throw new Error(ERR_INCONSISTENT_STATE);\n            }\n        }\n        return null;\n    }\n    set(key, value) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            let index = this.deserializeIndex(indexRaw);\n            return this.values.replace(index, value);\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.keys.push(key);\n            this.values.push(value);\n            return null;\n        }\n    }\n    remove(key) {\n        let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastKey = this.keys.get(this.len() - 1);\n                if (!lastKey) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastKey != key) {\n                    let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);\n                    near.storageWrite(lastLookupKey, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.keys.swapRemove(index);\n            return this.values.swapRemove(index);\n        }\n        return null;\n    }\n    clear() {\n        for (let key of this.keys) {\n            let indexLookup = this.keyIndexPrefix + JSON.stringify(key);\n            near.storageRemove(indexLookup);\n        }\n        this.keys.clear();\n        this.values.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    extend(kvs) {\n        for (let [k, v] of kvs) {\n            this.set(k, v);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let map = new UnorderedMap(data.prefix);\n        // reconstruct UnorderedMap\n        map.length = data.length;\n        // reconstruct keys Vector\n        map.keys = new Vector(data.prefix + \"k\");\n        map.keys.length = data.keys.length;\n        // reconstruct values Vector\n        map.values = new Vector(data.prefix + \"v\");\n        map.values.length = data.values.length;\n        return map;\n    }\n}\nclass UnorderedMapIterator {\n    constructor(unorderedMap) {\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.values = new VectorIterator(unorderedMap.values);\n    }\n    next() {\n        let key = this.keys.next();\n        let value = this.values.next();\n        if (key.done != value.done) {\n            throw new Error(ERR_INCONSISTENT_STATE);\n        }\n        return { value: [key.value, value.value], done: key.done };\n    }\n}\n","import * as near from \"../api\";\nimport { u8ArrayToBytes, bytesToU8Array } from \"../utils\";\nimport { Vector } from \"./vector\";\nconst ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport class UnorderedSet {\n    constructor(prefix) {\n        this.length = 0;\n        this.prefix = prefix;\n        this.elementIndexPrefix = prefix + \"i\";\n        let elementsPrefix = prefix + \"e\";\n        this.elements = new Vector(elementsPrefix);\n    }\n    len() {\n        return this.elements.len();\n    }\n    isEmpty() {\n        return this.elements.isEmpty();\n    }\n    serializeIndex(index) {\n        let data = new Uint32Array([index]);\n        let array = new Uint8Array(data.buffer);\n        return u8ArrayToBytes(array);\n    }\n    deserializeIndex(rawIndex) {\n        let array = bytesToU8Array(rawIndex);\n        let data = new Uint32Array(array.buffer);\n        return data[0];\n    }\n    contains(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        return near.storageHasKey(indexLookup);\n    }\n    set(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        if (near.storageRead(indexLookup)) {\n            return false;\n        }\n        else {\n            let nextIndex = this.len();\n            let nextIndexRaw = this.serializeIndex(nextIndex);\n            near.storageWrite(indexLookup, nextIndexRaw);\n            this.elements.push(element);\n            return true;\n        }\n    }\n    remove(element) {\n        let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n        let indexRaw = near.storageRead(indexLookup);\n        if (indexRaw) {\n            if (this.len() == 1) {\n                // If there is only one element then swap remove simply removes it without\n                // swapping with the last element.\n                near.storageRemove(indexLookup);\n            }\n            else {\n                // If there is more than one element then swap remove swaps it with the last\n                // element.\n                let lastElement = this.elements.get(this.len() - 1);\n                if (!lastElement) {\n                    throw new Error(ERR_INCONSISTENT_STATE);\n                }\n                near.storageRemove(indexLookup);\n                // If the removed element was the last element from keys, then we don't need to\n                // reinsert the lookup back.\n                if (lastElement != element) {\n                    let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);\n                    near.storageWrite(lastLookupElement, indexRaw);\n                }\n            }\n            let index = this.deserializeIndex(indexRaw);\n            this.elements.swapRemove(index);\n            return true;\n        }\n        return false;\n    }\n    clear() {\n        for (let element of this.elements) {\n            let indexLookup = this.elementIndexPrefix + JSON.stringify(element);\n            near.storageRemove(indexLookup);\n        }\n        this.elements.clear();\n    }\n    toArray() {\n        let ret = [];\n        for (let v of this) {\n            ret.push(v);\n        }\n        return ret;\n    }\n    [Symbol.iterator]() {\n        return this.elements[Symbol.iterator]();\n    }\n    extend(elements) {\n        for (let element of elements) {\n            this.set(element);\n        }\n    }\n    serialize() {\n        return JSON.stringify(this);\n    }\n    // converting plain object to class object\n    static deserialize(data) {\n        let set = new UnorderedSet(data.prefix);\n        // reconstruct UnorderedSet\n        set.length = data.length;\n        // reconstruct Vector\n        let elementsPrefix = data.prefix + \"e\";\n        set.elements = new Vector(elementsPrefix);\n        set.elements.length = data.elements.length;\n        return set;\n    }\n}\n","// @ts-nocheck\nimport { Contract } from \".\";\n\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n    \n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec\n        this.name = name\n        this.symbol = symbol\n        this.icon = icon\n        this.base_uri = baseUri\n        this.reference = reference\n        this.reference_hash = referenceHash\n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title\n        this.description = description\n        this.media = media\n        this.media_hash = mediaHash\n        this.copies = copies\n        this.issued_at = issuedAt\n        this.expires_at = expiresAt\n        this.starts_at = startsAt\n        this.updated_at = updatedAt\n        this.extra = extra\n        this.reference = reference\n        this.reference_hash = referenceHash\n    }\n}\n\nexport class Token {\n    owner_id: string;\n\n    constructor({\n        ownerId,\n    }: {\n        ownerId: string\n    }) {\n        this.owner_id = ownerId;\n    }\n}\n\nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n\n    constructor({ \n        tokenId, \n        ownerId, \n        metadata, \n    }:{\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n    }) {\n        this.token_id = tokenId,\n        this.owner_id = ownerId,\n        this.metadata = metadata\n    }\n}\n\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}","import { assert, near, UnorderedSet, Vector } from \"near-sdk-js\";\nimport { Contract } from \".\";\nimport { NFTContractMetadata, Token } from \"./metadata\";\n\nexport function restoreOwners(collection) {\n    if (collection == null) {\n        return null;\n    }\n    return UnorderedSet.deserialize(collection as UnorderedSet);\n}\n\nexport function refundDeposit(storageUsed: bigint) {\n    let requiredCost = storageUsed * near.storageByteCost().valueOf()\n    let attachedDeposit = near.attachedDeposit().valueOf();\n\n    assert(\n        requiredCost <= attachedDeposit,\n        `Must attach ${requiredCost} yoctoNEAR to cover storage`\n    )\n\n    let refund = attachedDeposit - requiredCost;\n    near.log(`Refunding ${refund} yoctoNEAR`);\n\n    if (refund > 1) {\n        const promise = near.promiseBatchCreate(near.predecessorAccountId());\n        near.promiseBatchActionTransfer(promise, refund)\n    }\n}\n\nexport function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if(tokenSet == null) {\n        tokenSet = new UnorderedSet(\"tokensPerOwner\" + accountId.toString());\n    }\n\n    tokenSet.set(tokenId);\n\n    contract.tokensPerOwner.set(accountId, tokenSet);\n}\n\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}\n\nexport function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, memo: string): Token {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        near.panic(\"no token found\");\n    }\n\n    assert(token.owner_id === senderId, \"Token should be owned by the sender\");\n\n    assert(token.owner_id != receiverId, \"The token owner and the receiver should be different\")\n\n    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);\n    internalAddTokenToOwner(contract, receiverId, tokenId);\n\n    let newToken = new Token ({\n        ownerId: receiverId,\n    });\n\n    contract.tokensById.set(tokenId, newToken);\n\n    if (memo != null) {\n        near.log(`Memo: ${memo}`);\n    }\n\n    return token\n}\n\nexport function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n    if (tokenSet == null) {\n        near.panic(\"Token should be owned by the sender\");\n    }\n\n    tokenSet.remove(tokenId)\n\n    if (tokenSet.isEmpty()) {\n        contract.tokensPerOwner.remove(accountId);\n        contract.tokensPerOwner.set(accountId, tokenSet);\n    }\n}","// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { Token, TokenMetadata } from \"./metadata\";\n\nexport function internalMint({\n    contract,\n    tokenId,\n    metadata,\n    receiverId,\n    perpetualRoyalties\n}:{ \n    contract: Contract, \n    tokenId: string, \n    metadata: TokenMetadata, \n    receiverId: string \n    perpetualRoyalties: {[key: string]: number}\n}): void {\n    let initialStorageUsage = near.storageUsage();\n\n    let token = new Token ({\n        ownerId: receiverId\n    });\n\n    assert(!contract.tokensById.containsKey(tokenId), \"Token already exists\");\n    contract.tokensById.set(tokenId, token)\n\n    contract.tokenMetadataById.set(tokenId, metadata);\n\n    internalAddTokenToOwner(contract, token.owner_id, tokenId)\n\n    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();\n\n    refundDeposit(requiredStorageInBytes);\n}","// @ts-nocheck\nimport { Contract } from \".\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        return null;\n    }\n\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n    \n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n    });\n    return jsonToken;\n}\n\nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string, \n    approvalId: number\n    memo: string\n}) {\n    assertOneYocto();\n    let senderId = near.predecessorAccountId();\n\n    internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        memo\n    );\n}\n\nexport function assertOneYocto() {\n    assert(near.attachedDeposit().toString() === \"1\", \"Requires attached deposit of exactly 1 yoctoNEAR\");\n}\n\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}:{\n    contract: Contract,\n    receiverId: string, \n    tokenId: string, \n    approvalId: number,\n    memo: string,\n    msg: string  \n}) {\n    assertOneYocto();\n    let senderId = near.predecessorAccountId();\n\n    let previousToken = internalTransfer(\n        contract,\n        senderId,\n        receiverId,\n        tokenId,\n        memo,\n    );\n\n    const promise = near.promiseBatchCreate(receiverId);\n    near.promiseBatchActionFunctionCall(\n        promise, \n        \"nft_on_transfer\", \n        bytes(JSON.stringify({ \n            sender_id: senderId,\n            previous_owner_id: previousToken.owner_id,\n            token_id: tokenId,\n            msg\n        })), \n        0,\n        GAS_FOR_NFT_ON_TRANSFER\n    );\n\n    near.promiseThen(\n        promise, \n        near.currentAccountId(), \n        \"nft_resolve_transfer\", \n        bytes(JSON.stringify({\n            owner_id: previousToken.owner_id,\n            receiver_id: receiverId,\n            token_id: tokenId\n        })), \n        0,\n        GAS_FOR_RESOLVE_TRANSFER\n    );\n    return near.promiseReturn(promise);\n}\n\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}:{\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string    \n}) {\n    assert(near.currentAccountId() === near.predecessorAccountId(), \"Only the contract itself can call this method\");\n    let result = near.promiseResult(0);\n    if (typeof result === 'string') {\n        if (result === 'false') {\n            return true;\n        }\n    }\n\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token != null) {\n        if (token.owner_id != receiverId) {\n            return true;\n        }\n    } else {\n        return true;\n    }\n\n    internalRemoveTokenFromOwner(contract, receiverId, tokenId);\n    \n    internalAddTokenToOwner(contract, ownerId, tokenId);\n    token.owner_id = ownerId\n\n    contract.tokensById.set(tokenId, token);\n\n    return false\n}","// @ts-nocheck\nimport { Contract } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\nexport function internalTotalSupply({\n    contract\n}:{\n    contract: Contract\n}): number {\n    return contract.tokenMetadataById.len();\n}\n\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    let max = limit ? limit : 50;\n\n    let keys = contract.tokenMetadataById.toArray();\n    for (let i = start; i < keys.length && i < start + max; i++) {\n        let jsonToken = internalNftToken({contract, tokenId: keys[i][0]});\n        tokens.push(jsonToken);\n    }\n    return tokens;\n}\n\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}:{\n    contract: Contract, \n    accountId: string\n}): number {\n    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));\n    if (tokens == null) {\n        return 0\n    }\n\n    return tokens.len();\n}\n\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{\n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));\n\n    if (tokenSet == null) {\n        return [];\n    }\n    \n    let start = fromIndex ? parseInt(fromIndex) : 0;\n    let max = limit ? limit : 50;\n\n    let keys = tokenSet.toArray();\n    let tokens: JsonToken[] = []\n    for(let i = start; i < max; i++) {\n        if(i >= keys.length) {\n            break;\n        }\n        let token = internalNftToken({contract, tokenId: keys[i]});\n        tokens.push(token);\n    }\n    return tokens;\n}","// @ts-nocheck\nimport { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet } from 'near-sdk-js'\nimport { NFTContractMetadata, Token, TokenMetadata, internalNftMetadata } from './metadata';\nimport { internalMint } from './mint';\nimport { internalNftTokens, internalSupplyForOwner, internalTokensForOwner, internalTotalSupply } from './enumeration';\nimport { internalNftToken } from './nft_core';\n\nexport const NFT_METADATA_SPEC = \"nft-1.0.0\";\n\nexport const NFT_STANDARD_NAME = \"nep171\";\n\n@NearBindgen\nexport class Contract extends NearContract {\n    owner_id: string;\n    tokensPerOwner: LookupMap<AccountId, UnorderedSet<TokenId>>;\n    tokensById: LookupMap<TokenId, Token>;\n    tokenMetadataById: UnorderedMap<TokenId, TokenMetadata>;\n    metadata: NFTContractMetadata;\n\n    constructor({\n        owner_id, \n        metadata = {\n            spec: \"nft-1.0.0\",\n            name: \"NFT Vincen Contract\",\n            symbol: \"Vincen\"\n        } \n    }) {\n        super()\n        this.owner_id = owner_id;\n        this.tokensPerOwner = new LookupMap(\"tokensPerOwner\");\n        this.tokensById = new LookupMap(\"tokensById\");\n        this.tokenMetadataById = new UnorderedMap(\"tokenMetadataById\");\n        this.metadata = metadata;\n    }\n\n    default() {\n        return new Contract({owner_id: ''})\n    }\n\n    /*\n        MINT\n    */\n    @call\n    nft_mint({ token_id, metadata, receiver_id, perpetual_royalties }) {\n        return internalMint({ contract: this, tokenId: token_id, metadata: metadata, receiverId: receiver_id, perpetualRoyalties: perpetual_royalties });\n    }\n\n    /*\n        CORE\n    */\n    @view\n    //get the information for a specific token ID\n    nft_token({ token_id }) {\n        return internalNftToken({ contract: this, tokenId: token_id });\n    }\n\n    /*\n        ENUMERATION\n    */\n    @view\n    //Query for the total supply of NFTs on the contract\n    nft_total_supply() {\n        return internalTotalSupply({ contract: this });\n    }\n\n    @view\n    //Query for nft tokens on the contract regardless of the owner using pagination\n    nft_tokens({ from_index, limit }) {\n        return internalNftTokens({ contract: this, fromIndex: from_index, limit: limit });\n    }\n\n    @view\n    //get the total supply of NFTs for a given ownernft_tokens_for_owner\n    nft_tokens_for_owner({ account_id, from_index, limit }) {\n        return internalTokensForOwner({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });\n    }\n\n    @view\n    //Query for all the tokens for an owner\n    nft_supply_for_owner({ account_id }) {\n        return internalSupplyForOwner({ contract: this, accountId: account_id });\n    }\n\n    /*\n        METADATA\n    */\n    @view\n    //Query for all the tokens for an owner\n    nft_metadata() {\n        return internalNftMetadata(this);\n    }\n}"],"names":["call","target","key","descriptor","view","NearBindgen","_init","args","deserializeArgs","ret","init","serialize","_get","Object","create","prototype","U64_MAX","EVICTED_REGISTER","log","params","env","map","x","undefined","JSON","stringify","join","predecessorAccountId","predecessor_account_id","read_register","attachedDeposit","attached_deposit","storageRead","storage_read","storageHasKey","storage_has_key","storageGetEvicted","input","storageUsage","storage_usage","promiseBatchCreate","accountId","promise_batch_create","promiseBatchActionTransfer","promiseIndex","amount","promise_batch_action_transfer","PromiseResult","storageWrite","value","exist","storage_write","storageRemove","storage_remove","storageByteCost","NearContract","deserialize","rawState","near","state","parse","c","default","assign","item","constructor","Error","serializeReturn","LookupMap","keyPrefix","containsKey","storageKey","get","raw","remove","set","storageValue","extend","objects","kv","data","u8ArrayToBytes","array","e","String","fromCharCode","bytesToU8Array","bytes","Uint8Array","length","i","charCodeAt","assert","b","str","ERR_INDEX_OUT_OF_BOUNDS","ERR_INCONSISTENT_STATE","indexToKey","prefix","index","Uint32Array","buffer","Vector","len","isEmpty","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","elements","Symbol","iterator","VectorIterator","clear","toArray","v","vector","current","next","done","UnorderedMap","keyIndexPrefix","indexKey","indexValue","keys","values","keysLen","valuesLen","keysIsEmpty","valuesIsEmpty","serializeIndex","deserializeIndex","rawIndex","getIndexRaw","indexLookup","indexRaw","nextIndex","nextIndexRaw","lastLookupKey","UnorderedMapIterator","kvs","k","unorderedMap","UnorderedSet","elementIndexPrefix","elementsPrefix","contains","lastElement","lastLookupElement","Token","ownerId","owner_id","JsonToken","tokenId","metadata","token_id","internalNftMetadata","contract","restoreOwners","collection","refundDeposit","storageUsed","requiredCost","valueOf","refund","promise","internalAddTokenToOwner","tokenSet","tokensPerOwner","toString","internalMint","receiverId","perpetualRoyalties","initialStorageUsage","token","tokensById","tokenMetadataById","requiredStorageInBytes","internalNftToken","jsonToken","internalTotalSupply","internalNftTokens","fromIndex","limit","start","parseInt","max","tokens","internalSupplyForOwner","internalTokensForOwner","NFT_METADATA_SPEC","NFT_STANDARD_NAME","Contract","spec","name","symbol","nft_mint","receiver_id","perpetual_royalties","nft_token","nft_total_supply","nft_tokens","from_index","nft_tokens_for_owner","account_id","nft_supply_for_owner","nft_metadata"],"mappings":"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"}